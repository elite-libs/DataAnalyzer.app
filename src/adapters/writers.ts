import typescriptWriter from './writer.typescript';
import mongooseWriter from './writer.mongoose';
import knexWriter from './writer.knex';
import golangWriter from './writer.golang';
import sqlWriter from './writer.sql';

import type {
  ISchemaAnalyzerOptions,
  // TypeSummary,
  CombinedFieldInfo,
  FieldInfo,
  TypeSummaryResults,
  KeyValPair,
} from 'types';

export interface IDataAnalyzerWriter {
  render(options: IRenderArgs): string;
}
export interface IRenderArgs {
  schemaName: string;
  results: TypeSummaryResults;
  options?: ISchemaAnalyzerOptions;
}

const writers = {
  typescript: typescriptWriter,
  golang: golangWriter,
  mongoose: mongooseWriter,
  knex: knexWriter,
  sql: sqlWriter,
};

export type AdapterNames = keyof typeof writers;

export function render({
  schemaName,
  options,
  adapter,
}: {
  schemaName: string;
  options: ISchemaAnalyzerOptions;
  adapter: AdapterNames;
}) {
  return (results: TypeSummaryResults) => {
    const renderer = writers[adapter];
    if (!renderer) throw new Error(`Invalid Render Adapter Specified: ${adapter}`);

    const header = `/*
    Code Generated by DataAnalyzer.app
    @date ${new Date().toISOString()}
    @debug ${Boolean(options.debug)}
    */\n${options.debug ? getDebugSummary(results, options) + '\n' : ''}\n`;

    return (
      header +
      renderer.render({
        schemaName,
        options,
        results,
      })
    );
  };
}

function getDebugSummary(
  typeSummary: TypeSummaryResults,
  options: ISchemaAnalyzerOptions,
) {
  const { debug } = options;
  const { nestedTypes } = typeSummary;
  const nestedTypeNames: string[] = nestedTypes != null ? Object.keys(nestedTypes) : [];
  const nestedCount = nestedTypeNames.length;
  const consolidatedTypes = typeSummary.denseNestedTypes
    ? typeSummary.denseNestedTypes
    : null;
  const consolidatedTypeNames = consolidatedTypes ? Object.keys(consolidatedTypes) : null;
  const consolidatedCount = consolidatedTypeNames ? consolidatedTypeNames.length : 0;

  const getOptions = () =>
    debug
      ? `@Options:
${Object.entries(options)
  .map((opt) => '  ' + opt.join(': '))
  .join('\n')}\n`
      : '\n';
  const getSubTypes = (typeNames: string[]) => `@SubTypes: ${typeNames.length} found
${
  debug
    ? typeNames
        .slice()
        .sort()
        .filter((name) => name[0] !== '_')
        .map((name) => '  ' + name + ' ' + getDebugFieldsInfo(nestedTypes![name]!))
        .join('\n')
    : ''
}`;

  return `\n\n/*
${debug ? '#### DEBUG INFO ####\n' : ''}@SchemaName: ${typeSummary.schemaName}
@TotalRows: ${typeSummary.totalRows}
${debug ? getOptions() : ''}@CondensedTypes: ${
    consolidatedTypes
      ? `De-duplicated ${nestedCount - consolidatedCount} out of ${nestedCount} types`
      : 'false'
  }
${getSubTypes(consolidatedTypeNames || nestedTypeNames)}
*/`;
}

function getDebugFieldsInfo({
  fields,
  totalRows,
}: {
  fields: KeyValPair<FieldInfo | CombinedFieldInfo>;
  totalRows: number;
}) {
  return `// ${Object.keys(fields).length} fields; ${totalRows} rows processed.`;
}

// function getDebugInfoCondensedTypes(
//   typeSummary: TypeSummary<CombinedFieldInfo>,
//   condensedSummary: TypeSummary<CombinedFieldInfo>,
// ) {
//   return ``;
// }
