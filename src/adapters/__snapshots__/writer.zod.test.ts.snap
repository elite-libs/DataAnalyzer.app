// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`#zod can emit migration for eventResults json 1`] = `
"import { z } from \\"zod\\";


export const EventResultsSchema = z.object({
  _links: z.lazy(() => EventResultsLinksSchema),
  _embedded: z.lazy(() => EventResultsEmbeddedSchema),
  page: z.lazy(() => EventResultsPageSchema)
});
export const EventResultsLinksSchema = z.object({
  self: z.lazy(() => EventResultsLinksSelfSchema),
  next: z.lazy(() => EventResultsLinksNextSchema)
});
export const EventResultsEmbeddedSchema = z.object({
  events: z.lazy(() => EventResultsEmbeddedEventsSchema)
});
export const EventResultsPageSchema = z.object({
  size: z.number(),
  totalElements: z.number(),
  totalPages: z.number(),
  number: z.number()
});
export const EventResultsLinksSelfSchema = z.object({
  href: z.string(),
  templated: z.boolean()
});
export const EventResultsLinksNextSchema = z.object({
  href: z.string(),
  templated: z.boolean()
});
export const EventResultsEmbeddedEventsSchema = z.object({
  name: z.string(),
  type: z.string(),
  id: z.string(),
  test: z.boolean(),
  url: z.string(),
  locale: z.string(),
  images: z.lazy(() => EventResultsEmbeddedEventsImagesSchema),
  sales: z.lazy(() => EventResultsEmbeddedEventsSalesSchema),
  dates: z.lazy(() => EventResultsEmbeddedEventsDatesSchema),
  classifications: z.lazy(() => EventResultsEmbeddedEventsClassificationsSchema),
  promoter: z.lazy(() => EventResultsEmbeddedEventsPromoterSchema),
  _links: z.lazy(() => EventResultsEmbeddedEventsLinksSchema),
  _embedded: z.lazy(() => EventResultsEmbeddedEventsEmbeddedSchema)
});
export const EventResultsEmbeddedEventsImagesSchema = z.object({
  ratio: z.string(),
  url: z.string(),
  width: z.number(),
  height: z.number(),
  fallback: z.boolean()
});
export const EventResultsEmbeddedEventsSalesSchema = z.object({
  public: z.lazy(() => EventResultsEmbeddedEventsSalesPublicSchema)
});
export const EventResultsEmbeddedEventsDatesSchema = z.object({
  start: z.lazy(() => EventResultsEmbeddedEventsDatesStartSchema),
  timezone: z.string(),
  status: z.lazy(() => EventResultsEmbeddedEventsDatesStatusSchema)
});
export const EventResultsEmbeddedEventsClassificationsSchema = z.object({
  primary: z.boolean(),
  segment: z.lazy(() => EventResultsEmbeddedEventsClassificationsSegmentSchema),
  genre: z.lazy(() => EventResultsEmbeddedEventsClassificationsGenreSchema),
  subGenre: z.lazy(() => EventResultsEmbeddedEventsClassificationsSubGenreSchema)
});
export const EventResultsEmbeddedEventsPromoterSchema = z.object({
  id: z.number()
});
export const EventResultsEmbeddedEventsLinksSchema = z.object({
  self: z.lazy(() => EventResultsEmbeddedEventsLinksSelfSchema),
  attractions: z.lazy(() => EventResultsEmbeddedEventsLinksAttractionsSchema),
  venues: z.lazy(() => EventResultsEmbeddedEventsLinksVenuesSchema)
});
export const EventResultsEmbeddedEventsEmbeddedSchema = z.object({
  venues: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesSchema),
  attractions: z.lazy(() => EventResultsEmbeddedEventsEmbeddedAttractionsSchema)
});
export const EventResultsEmbeddedEventsSalesPublicSchema = z.object({
  startDateTime: z.date(),
  startTBD: z.boolean(),
  endDateTime: z.date()
});
export const EventResultsEmbeddedEventsDatesStartSchema = z.object({
  localDate: z.date(),
  dateTBD: z.boolean(),
  dateTBA: z.boolean(),
  timeTBA: z.boolean(),
  noSpecificTime: z.boolean()
});
export const EventResultsEmbeddedEventsDatesStatusSchema = z.object({
  code: z.string()
});
export const EventResultsEmbeddedEventsClassificationsSegmentSchema = z.object({
  id: z.string(),
  name: z.string()
});
export const EventResultsEmbeddedEventsClassificationsGenreSchema = z.object({
  id: z.string(),
  name: z.string()
});
export const EventResultsEmbeddedEventsClassificationsSubGenreSchema = z.object({
  id: z.string(),
  name: z.string()
});
export const EventResultsEmbeddedEventsLinksSelfSchema = z.object({
  href: z.string()
});
export const EventResultsEmbeddedEventsLinksAttractionsSchema = z.object({
  href: z.string()
});
export const EventResultsEmbeddedEventsLinksVenuesSchema = z.object({
  href: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesSchema = z.object({
  name: z.string(),
  type: z.string(),
  id: z.string(),
  test: z.boolean(),
  locale: z.string(),
  postalCode: z.number(),
  timezone: z.string(),
  city: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesCitySchema),
  state: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesStateSchema),
  country: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesCountrySchema),
  address: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesAddressSchema),
  location: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesLocationSchema),
  markets: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesMarketsSchema),
  _links: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesLinksSchema)
});
export const EventResultsEmbeddedEventsEmbeddedAttractionsSchema = z.object({
  name: z.string(),
  type: z.string(),
  id: z.string(),
  test: z.boolean(),
  locale: z.string(),
  images: z.lazy(() => EventResultsEmbeddedEventsEmbeddedAttractionsImagesSchema),
  classifications: z.lazy(() => EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSchema),
  _links: z.lazy(() => EventResultsEmbeddedEventsEmbeddedAttractionsLinksSchema)
});
export const EventResultsEmbeddedEventsEmbeddedVenuesCitySchema = z.object({
  name: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesStateSchema = z.object({
  name: z.string(),
  stateCode: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesCountrySchema = z.object({
  name: z.string(),
  countryCode: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesAddressSchema = z.object({
  line1: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesLocationSchema = z.object({
  longitude: z.number(),
  latitude: z.number()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesMarketsSchema = z.object({
  id: z.number()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesLinksSchema = z.object({
  self: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesLinksSelfSchema)
});
export const EventResultsEmbeddedEventsEmbeddedVenuesLinksSelfSchema = z.object({
  href: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedAttractionsImagesSchema = z.object({
  ratio: z.string(),
  url: z.string(),
  width: z.number(),
  height: z.number(),
  fallback: z.boolean()
});
export const EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSchema = z.object({
  primary: z.boolean(),
  segment: z.lazy(() => EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSegmentSchema),
  genre: z.lazy(() => EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsGenreSchema),
  subGenre: z.lazy(() => EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSubGenreSchema)
});
export const EventResultsEmbeddedEventsEmbeddedAttractionsLinksSchema = z.object({
  self: z.lazy(() => EventResultsEmbeddedEventsEmbeddedAttractionsLinksSelfSchema)
});
export const EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSegmentSchema = z.object({
  id: z.string(),
  name: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsGenreSchema = z.object({
  id: z.string(),
  name: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSubGenreSchema = z.object({
  id: z.string(),
  name: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedAttractionsLinksSelfSchema = z.object({
  href: z.string()
});
export type EventResults = z.infer<typeof EventResultsSchema>;
export type EventResultsLinks = z.infer<typeof EventResultsLinksSchema>;
export type EventResultsEmbedded = z.infer<typeof EventResultsEmbeddedSchema>;
export type EventResultsPage = z.infer<typeof EventResultsPageSchema>;
export type EventResultsLinksSelf = z.infer<typeof EventResultsLinksSelfSchema>;
export type EventResultsLinksNext = z.infer<typeof EventResultsLinksNextSchema>;
export type EventResultsEmbeddedEvents = z.infer<typeof EventResultsEmbeddedEventsSchema>;
export type EventResultsEmbeddedEventsImages = z.infer<typeof EventResultsEmbeddedEventsImagesSchema>;
export type EventResultsEmbeddedEventsSales = z.infer<typeof EventResultsEmbeddedEventsSalesSchema>;
export type EventResultsEmbeddedEventsDates = z.infer<typeof EventResultsEmbeddedEventsDatesSchema>;
export type EventResultsEmbeddedEventsClassifications = z.infer<typeof EventResultsEmbeddedEventsClassificationsSchema>;
export type EventResultsEmbeddedEventsPromoter = z.infer<typeof EventResultsEmbeddedEventsPromoterSchema>;
export type EventResultsEmbeddedEventsLinks = z.infer<typeof EventResultsEmbeddedEventsLinksSchema>;
export type EventResultsEmbeddedEventsEmbedded = z.infer<typeof EventResultsEmbeddedEventsEmbeddedSchema>;
export type EventResultsEmbeddedEventsSalesPublic = z.infer<typeof EventResultsEmbeddedEventsSalesPublicSchema>;
export type EventResultsEmbeddedEventsDatesStart = z.infer<typeof EventResultsEmbeddedEventsDatesStartSchema>;
export type EventResultsEmbeddedEventsDatesStatus = z.infer<typeof EventResultsEmbeddedEventsDatesStatusSchema>;
export type EventResultsEmbeddedEventsClassificationsSegment = z.infer<typeof EventResultsEmbeddedEventsClassificationsSegmentSchema>;
export type EventResultsEmbeddedEventsClassificationsGenre = z.infer<typeof EventResultsEmbeddedEventsClassificationsGenreSchema>;
export type EventResultsEmbeddedEventsClassificationsSubGenre = z.infer<typeof EventResultsEmbeddedEventsClassificationsSubGenreSchema>;
export type EventResultsEmbeddedEventsLinksSelf = z.infer<typeof EventResultsEmbeddedEventsLinksSelfSchema>;
export type EventResultsEmbeddedEventsLinksAttractions = z.infer<typeof EventResultsEmbeddedEventsLinksAttractionsSchema>;
export type EventResultsEmbeddedEventsLinksVenues = z.infer<typeof EventResultsEmbeddedEventsLinksVenuesSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenues = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesSchema>;
export type EventResultsEmbeddedEventsEmbeddedAttractions = z.infer<typeof EventResultsEmbeddedEventsEmbeddedAttractionsSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesCity = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesCitySchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesState = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesStateSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesCountry = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesCountrySchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesAddress = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesAddressSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesLocation = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesLocationSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesMarkets = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesMarketsSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesLinks = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesLinksSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesLinksSelf = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesLinksSelfSchema>;
export type EventResultsEmbeddedEventsEmbeddedAttractionsImages = z.infer<typeof EventResultsEmbeddedEventsEmbeddedAttractionsImagesSchema>;
export type EventResultsEmbeddedEventsEmbeddedAttractionsClassifications = z.infer<typeof EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSchema>;
export type EventResultsEmbeddedEventsEmbeddedAttractionsLinks = z.infer<typeof EventResultsEmbeddedEventsEmbeddedAttractionsLinksSchema>;
export type EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSegment = z.infer<typeof EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSegmentSchema>;
export type EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsGenre = z.infer<typeof EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsGenreSchema>;
export type EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSubGenre = z.infer<typeof EventResultsEmbeddedEventsEmbeddedAttractionsClassificationsSubGenreSchema>;
export type EventResultsEmbeddedEventsEmbeddedAttractionsLinksSelf = z.infer<typeof EventResultsEmbeddedEventsEmbeddedAttractionsLinksSelfSchema>;
"
`;

exports[`#zod can emit migration for eventResults json, w/ dense & trim fields 1`] = `
"import { z } from \\"zod\\";


export const EventResultsSchema = z.object({
  _links: z.lazy(() => LinksSchema),
  _embedded: z.lazy(() => EmbeddedSchema),
  page: z.lazy(() => PageSchema)
});
export const LinksSchema = z.object({
  self: z.lazy(() => SelfSchema)
});
export const EmbeddedSchema = z.object({
  venues: z.lazy(() => VenuesSchema),
  attractions: z.lazy(() => AttractionsSchema)
});
export const PageSchema = z.object({
  size: z.number(),
  totalElements: z.number(),
  totalPages: z.number(),
  number: z.number()
});
export const SelfSchema = z.object({
  href: z.string()
});
export const NextSchema = z.object({
  href: z.string(),
  templated: z.boolean()
});
export const EventsSchema = z.object({
  name: z.string(),
  type: z.string(),
  id: z.string(),
  test: z.boolean(),
  url: z.string(),
  locale: z.string(),
  images: z.lazy(() => ImagesSchema),
  sales: z.lazy(() => SalesSchema),
  dates: z.lazy(() => DatesSchema),
  classifications: z.lazy(() => ClassificationsSchema),
  promoter: z.lazy(() => PromoterSchema),
  _links: z.lazy(() => LinksSchema),
  _embedded: z.lazy(() => EmbeddedSchema)
});
export const ImagesSchema = z.object({
  ratio: z.string(),
  url: z.string(),
  width: z.number(),
  height: z.number(),
  fallback: z.boolean()
});
export const SalesSchema = z.object({
  public: z.lazy(() => PublicSchema)
});
export const DatesSchema = z.object({
  start: z.lazy(() => StartSchema),
  timezone: z.string(),
  status: z.lazy(() => StatusSchema)
});
export const ClassificationsSchema = z.object({
  primary: z.boolean(),
  segment: z.lazy(() => IdNameSchema),
  genre: z.lazy(() => IdNameSchema),
  subGenre: z.lazy(() => IdNameSchema)
});
export const PromoterSchema = z.object({
  id: z.number()
});
export const PublicSchema = z.object({
  startDateTime: z.date(),
  startTBD: z.boolean(),
  endDateTime: z.date()
});
export const StartSchema = z.object({
  localDate: z.date(),
  dateTBD: z.boolean(),
  dateTBA: z.boolean(),
  timeTBA: z.boolean(),
  noSpecificTime: z.boolean()
});
export const StatusSchema = z.object({
  code: z.string()
});
export const AttractionsSchema = z.object({
  name: z.string(),
  type: z.string(),
  id: z.string(),
  test: z.boolean(),
  locale: z.string(),
  images: z.lazy(() => ImagesSchema),
  classifications: z.lazy(() => ClassificationsSchema),
  _links: z.lazy(() => LinksSchema)
});
export const VenuesSchema = z.object({
  name: z.string(),
  type: z.string(),
  id: z.string(),
  test: z.boolean(),
  locale: z.string(),
  postalCode: z.number(),
  timezone: z.string(),
  city: z.lazy(() => CitySchema),
  state: z.lazy(() => StateSchema),
  country: z.lazy(() => CountrySchema),
  address: z.lazy(() => AddressSchema),
  location: z.lazy(() => LocationSchema),
  markets: z.lazy(() => MarketsSchema),
  _links: z.lazy(() => LinksSchema)
});
export const CitySchema = z.object({
  name: z.string()
});
export const StateSchema = z.object({
  name: z.string(),
  stateCode: z.string()
});
export const CountrySchema = z.object({
  name: z.string(),
  countryCode: z.string()
});
export const AddressSchema = z.object({
  line1: z.string()
});
export const LocationSchema = z.object({
  longitude: z.number(),
  latitude: z.number()
});
export const MarketsSchema = z.object({
  id: z.number()
});
export const IdNameSchema = z.object({
  id: z.string(),
  name: z.string()
});
export type EventResults = z.infer<typeof EventResultsSchema>;
export type Links = z.infer<typeof LinksSchema>;
export type Embedded = z.infer<typeof EmbeddedSchema>;
export type Page = z.infer<typeof PageSchema>;
export type Self = z.infer<typeof SelfSchema>;
export type Next = z.infer<typeof NextSchema>;
export type Events = z.infer<typeof EventsSchema>;
export type Images = z.infer<typeof ImagesSchema>;
export type Sales = z.infer<typeof SalesSchema>;
export type Dates = z.infer<typeof DatesSchema>;
export type Classifications = z.infer<typeof ClassificationsSchema>;
export type Promoter = z.infer<typeof PromoterSchema>;
export type Public = z.infer<typeof PublicSchema>;
export type Start = z.infer<typeof StartSchema>;
export type Status = z.infer<typeof StatusSchema>;
export type Attractions = z.infer<typeof AttractionsSchema>;
export type Venues = z.infer<typeof VenuesSchema>;
export type City = z.infer<typeof CitySchema>;
export type State = z.infer<typeof StateSchema>;
export type Country = z.infer<typeof CountrySchema>;
export type Address = z.infer<typeof AddressSchema>;
export type Location = z.infer<typeof LocationSchema>;
export type Markets = z.infer<typeof MarketsSchema>;
export type IdName = z.infer<typeof IdNameSchema>;
"
`;

exports[`#zod can emit migration for eventResults json, w/ dense fields 1`] = `
"import { z } from \\"zod\\";


export const EventResultsSchema = z.object({
  _links: z.lazy(() => EventResultsLinksSchema),
  _embedded: z.lazy(() => EventResultsEmbeddedSchema),
  page: z.lazy(() => EventResultsPageSchema)
});
export const EventResultsLinksSchema = z.object({
  self: z.lazy(() => HrefTemplatedSchema),
  next: z.lazy(() => HrefTemplatedSchema)
});
export const EventResultsEmbeddedSchema = z.object({
  events: z.lazy(() => EventResultsEmbeddedEventsSchema)
});
export const EventResultsPageSchema = z.object({
  size: z.number(),
  totalElements: z.number(),
  totalPages: z.number(),
  number: z.number()
});
export const EventResultsEmbeddedEventsSchema = z.object({
  name: z.string(),
  type: z.string(),
  id: z.string(),
  test: z.boolean(),
  url: z.string(),
  locale: z.string(),
  images: z.lazy(() => ImagesSchema),
  sales: z.lazy(() => EventResultsEmbeddedEventsSalesSchema),
  dates: z.lazy(() => EventResultsEmbeddedEventsDatesSchema),
  classifications: z.lazy(() => ClassificationsSchema),
  promoter: z.lazy(() => EventResultsEmbeddedEventsPromoterSchema),
  _links: z.lazy(() => EventResultsEmbeddedEventsLinksSchema),
  _embedded: z.lazy(() => EventResultsEmbeddedEventsEmbeddedSchema)
});
export const EventResultsEmbeddedEventsSalesSchema = z.object({
  public: z.lazy(() => EventResultsEmbeddedEventsSalesPublicSchema)
});
export const EventResultsEmbeddedEventsDatesSchema = z.object({
  start: z.lazy(() => EventResultsEmbeddedEventsDatesStartSchema),
  timezone: z.string(),
  status: z.lazy(() => EventResultsEmbeddedEventsDatesStatusSchema)
});
export const EventResultsEmbeddedEventsPromoterSchema = z.object({
  id: z.number()
});
export const EventResultsEmbeddedEventsLinksSchema = z.object({
  self: z.lazy(() => HrefSchema),
  attractions: z.lazy(() => HrefSchema),
  venues: z.lazy(() => HrefSchema)
});
export const EventResultsEmbeddedEventsEmbeddedSchema = z.object({
  venues: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesSchema),
  attractions: z.lazy(() => EventResultsEmbeddedEventsEmbeddedAttractionsSchema)
});
export const EventResultsEmbeddedEventsSalesPublicSchema = z.object({
  startDateTime: z.date(),
  startTBD: z.boolean(),
  endDateTime: z.date()
});
export const EventResultsEmbeddedEventsDatesStartSchema = z.object({
  localDate: z.date(),
  dateTBD: z.boolean(),
  dateTBA: z.boolean(),
  timeTBA: z.boolean(),
  noSpecificTime: z.boolean()
});
export const EventResultsEmbeddedEventsDatesStatusSchema = z.object({
  code: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesSchema = z.object({
  name: z.string(),
  type: z.string(),
  id: z.string(),
  test: z.boolean(),
  locale: z.string(),
  postalCode: z.number(),
  timezone: z.string(),
  city: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesCitySchema),
  state: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesStateSchema),
  country: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesCountrySchema),
  address: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesAddressSchema),
  location: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesLocationSchema),
  markets: z.lazy(() => EventResultsEmbeddedEventsEmbeddedVenuesMarketsSchema),
  _links: z.lazy(() => LinksSchema)
});
export const EventResultsEmbeddedEventsEmbeddedAttractionsSchema = z.object({
  name: z.string(),
  type: z.string(),
  id: z.string(),
  test: z.boolean(),
  locale: z.string(),
  images: z.lazy(() => ImagesSchema),
  classifications: z.lazy(() => ClassificationsSchema),
  _links: z.lazy(() => LinksSchema)
});
export const EventResultsEmbeddedEventsEmbeddedVenuesCitySchema = z.object({
  name: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesStateSchema = z.object({
  name: z.string(),
  stateCode: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesCountrySchema = z.object({
  name: z.string(),
  countryCode: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesAddressSchema = z.object({
  line1: z.string()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesLocationSchema = z.object({
  longitude: z.number(),
  latitude: z.number()
});
export const EventResultsEmbeddedEventsEmbeddedVenuesMarketsSchema = z.object({
  id: z.number()
});
export const HrefTemplatedSchema = z.object({
  href: z.string(),
  templated: z.boolean()
});
export const ImagesSchema = z.object({
  ratio: z.string(),
  url: z.string(),
  width: z.number(),
  height: z.number(),
  fallback: z.boolean()
});
export const ClassificationsSchema = z.object({
  primary: z.boolean(),
  segment: z.lazy(() => IdNameSchema),
  genre: z.lazy(() => IdNameSchema),
  subGenre: z.lazy(() => IdNameSchema)
});
export const IdNameSchema = z.object({
  id: z.string(),
  name: z.string()
});
export const HrefSchema = z.object({
  href: z.string()
});
export const LinksSchema = z.object({
  self: z.lazy(() => HrefSchema)
});
export type EventResults = z.infer<typeof EventResultsSchema>;
export type EventResultsLinks = z.infer<typeof EventResultsLinksSchema>;
export type EventResultsEmbedded = z.infer<typeof EventResultsEmbeddedSchema>;
export type EventResultsPage = z.infer<typeof EventResultsPageSchema>;
export type EventResultsEmbeddedEvents = z.infer<typeof EventResultsEmbeddedEventsSchema>;
export type EventResultsEmbeddedEventsSales = z.infer<typeof EventResultsEmbeddedEventsSalesSchema>;
export type EventResultsEmbeddedEventsDates = z.infer<typeof EventResultsEmbeddedEventsDatesSchema>;
export type EventResultsEmbeddedEventsPromoter = z.infer<typeof EventResultsEmbeddedEventsPromoterSchema>;
export type EventResultsEmbeddedEventsLinks = z.infer<typeof EventResultsEmbeddedEventsLinksSchema>;
export type EventResultsEmbeddedEventsEmbedded = z.infer<typeof EventResultsEmbeddedEventsEmbeddedSchema>;
export type EventResultsEmbeddedEventsSalesPublic = z.infer<typeof EventResultsEmbeddedEventsSalesPublicSchema>;
export type EventResultsEmbeddedEventsDatesStart = z.infer<typeof EventResultsEmbeddedEventsDatesStartSchema>;
export type EventResultsEmbeddedEventsDatesStatus = z.infer<typeof EventResultsEmbeddedEventsDatesStatusSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenues = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesSchema>;
export type EventResultsEmbeddedEventsEmbeddedAttractions = z.infer<typeof EventResultsEmbeddedEventsEmbeddedAttractionsSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesCity = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesCitySchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesState = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesStateSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesCountry = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesCountrySchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesAddress = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesAddressSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesLocation = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesLocationSchema>;
export type EventResultsEmbeddedEventsEmbeddedVenuesMarkets = z.infer<typeof EventResultsEmbeddedEventsEmbeddedVenuesMarketsSchema>;
export type HrefTemplated = z.infer<typeof HrefTemplatedSchema>;
export type Images = z.infer<typeof ImagesSchema>;
export type Classifications = z.infer<typeof ClassificationsSchema>;
export type IdName = z.infer<typeof IdNameSchema>;
export type Href = z.infer<typeof HrefSchema>;
export type Links = z.infer<typeof LinksSchema>;
"
`;

exports[`#zod can emit migration for pokemon json 1`] = `
"import { z } from \\"zod\\";


export const PokemonSchema = z.object({
  abilities: z.lazy(() => PokemonAbilitiesSchema),
  base_experience: z.number(),
  forms: z.lazy(() => PokemonFormsSchema),
  game_indices: z.lazy(() => PokemonGameIndicesSchema),
  height: z.number(),
  held_items: z.array(),
  id: z.number(),
  is_default: z.boolean(),
  location_area_encounters: z.string(),
  moves: z.lazy(() => PokemonMovesSchema),
  name: z.string(),
  order: z.number(),
  species: z.lazy(() => PokemonSpeciesSchema),
  sprites: z.lazy(() => PokemonSpritesSchema),
  stats: z.lazy(() => PokemonStatsSchema),
  types: z.lazy(() => PokemonTypesSchema),
  weight: z.number()
});
export const PokemonAbilitiesSchema = z.object({
  ability: z.lazy(() => PokemonAbilitiesAbilitySchema),
  is_hidden: z.boolean(),
  slot: z.number()
});
export const PokemonFormsSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonGameIndicesSchema = z.object({
  game_index: z.number(),
  version: z.lazy(() => PokemonGameIndicesVersionSchema)
});
export const PokemonMovesSchema = z.object({
  move: z.lazy(() => PokemonMovesMoveSchema),
  version_group_details: z.lazy(() => PokemonMovesVersionGroupDetailsSchema)
});
export const PokemonSpeciesSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonSpritesSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any(),
  other: z.lazy(() => PokemonSpritesOtherSchema),
  versions: z.lazy(() => PokemonSpritesVersionsSchema)
});
export const PokemonStatsSchema = z.object({
  base_stat: z.number(),
  effort: z.number(),
  stat: z.lazy(() => PokemonStatsStatSchema)
});
export const PokemonTypesSchema = z.object({
  slot: z.number(),
  type: z.lazy(() => PokemonTypesTypeSchema)
});
export const PokemonAbilitiesAbilitySchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonGameIndicesVersionSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonMovesMoveSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonMovesVersionGroupDetailsSchema = z.object({
  level_learned_at: z.number(),
  move_learn_method: z.lazy(() => PokemonMovesVersionGroupDetailsMoveLearnMethodSchema),
  version_group: z.lazy(() => PokemonMovesVersionGroupDetailsVersionGroupSchema)
});
export const PokemonMovesVersionGroupDetailsMoveLearnMethodSchema = z.object({
  name: z.string().enum([\\"machine\\", \\"tutor\\", \\"level-up\\", \\"egg\\"]),
  url: z.string().enum([\\"https://pokeapi.co/api/v2/move-learn-method/4/\\", \\"https://pokeapi.co/api/v2/move-learn-method/3/\\", \\"https://pokeapi.co/api/v2/move-learn-method/1/\\", \\"https://pokeapi.co/api/v2/move-learn-method/2/\\"])
});
export const PokemonMovesVersionGroupDetailsVersionGroupSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonSpritesOtherSchema = z.object({
  dream_world: z.lazy(() => PokemonSpritesOtherDreamWorldSchema),
  officialartwork: z.lazy(() => PokemonSpritesOtherOfficialArtworkSchema)
});
export const PokemonSpritesVersionsSchema = z.object({
  generationi: z.lazy(() => PokemonSpritesVersionsGenerationISchema),
  generationii: z.lazy(() => PokemonSpritesVersionsGenerationIiSchema),
  generationiii: z.lazy(() => PokemonSpritesVersionsGenerationIiiSchema),
  generationiv: z.lazy(() => PokemonSpritesVersionsGenerationIvSchema),
  generationv: z.lazy(() => PokemonSpritesVersionsGenerationVSchema),
  generationvi: z.lazy(() => PokemonSpritesVersionsGenerationViSchema),
  generationvii: z.lazy(() => PokemonSpritesVersionsGenerationViiSchema),
  generationviii: z.lazy(() => PokemonSpritesVersionsGenerationViiiSchema)
});
export const PokemonSpritesOtherDreamWorldSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const PokemonSpritesOtherOfficialArtworkSchema = z.object({
  front_default: z.string()
});
export const PokemonSpritesVersionsGenerationISchema = z.object({
  redblue: z.lazy(() => PokemonSpritesVersionsGenerationIRedBlueSchema),
  yellow: z.lazy(() => PokemonSpritesVersionsGenerationIYellowSchema)
});
export const PokemonSpritesVersionsGenerationIiSchema = z.object({
  crystal: z.lazy(() => PokemonSpritesVersionsGenerationIiCrystalSchema),
  gold: z.lazy(() => PokemonSpritesVersionsGenerationIiGoldSchema),
  silver: z.lazy(() => PokemonSpritesVersionsGenerationIiSilverSchema)
});
export const PokemonSpritesVersionsGenerationIiiSchema = z.object({
  emerald: z.lazy(() => PokemonSpritesVersionsGenerationIiiEmeraldSchema),
  fireredleafgreen: z.lazy(() => PokemonSpritesVersionsGenerationIiiFireredLeafgreenSchema),
  rubysapphire: z.lazy(() => PokemonSpritesVersionsGenerationIiiRubySapphireSchema)
});
export const PokemonSpritesVersionsGenerationIvSchema = z.object({
  diamondpearl: z.lazy(() => PokemonSpritesVersionsGenerationIvDiamondPearlSchema),
  heartgoldsoulsilver: z.lazy(() => PokemonSpritesVersionsGenerationIvHeartgoldSoulsilverSchema),
  platinum: z.lazy(() => PokemonSpritesVersionsGenerationIvPlatinumSchema)
});
export const PokemonSpritesVersionsGenerationVSchema = z.object({
  blackwhite: z.lazy(() => PokemonSpritesVersionsGenerationVBlackWhiteSchema)
});
export const PokemonSpritesVersionsGenerationViSchema = z.object({
  omegarubyalphasapphire: z.lazy(() => PokemonSpritesVersionsGenerationViOmegarubyAlphasapphireSchema),
  xy: z.lazy(() => PokemonSpritesVersionsGenerationViXYSchema)
});
export const PokemonSpritesVersionsGenerationViiSchema = z.object({
  icons: z.lazy(() => PokemonSpritesVersionsGenerationViiIconsSchema),
  ultrasunultramoon: z.lazy(() => PokemonSpritesVersionsGenerationViiUltraSunUltraMoonSchema)
});
export const PokemonSpritesVersionsGenerationViiiSchema = z.object({
  icons: z.lazy(() => PokemonSpritesVersionsGenerationViiiIconsSchema)
});
export const PokemonSpritesVersionsGenerationIRedBlueSchema = z.object({
  back_default: z.string(),
  back_gray: z.string(),
  front_default: z.string(),
  front_gray: z.string()
});
export const PokemonSpritesVersionsGenerationIYellowSchema = z.object({
  back_default: z.string(),
  back_gray: z.string(),
  front_default: z.string(),
  front_gray: z.string()
});
export const PokemonSpritesVersionsGenerationIiCrystalSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiGoldSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiSilverSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiiEmeraldSchema = z.object({
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiiFireredLeafgreenSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiiRubySapphireSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIvDiamondPearlSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationIvHeartgoldSoulsilverSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationIvPlatinumSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationVBlackWhiteSchema = z.object({
  animated: z.lazy(() => PokemonSpritesVersionsGenerationVBlackWhiteAnimatedSchema),
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationVBlackWhiteAnimatedSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationViOmegarubyAlphasapphireSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationViXYSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationViiIconsSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const PokemonSpritesVersionsGenerationViiUltraSunUltraMoonSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationViiiIconsSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const PokemonStatsStatSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonTypesTypeSchema = z.object({
  name: z.string(),
  url: z.string()
});
export type Pokemon = z.infer<typeof PokemonSchema>;
export type PokemonAbilities = z.infer<typeof PokemonAbilitiesSchema>;
export type PokemonForms = z.infer<typeof PokemonFormsSchema>;
export type PokemonGameIndices = z.infer<typeof PokemonGameIndicesSchema>;
export type PokemonMoves = z.infer<typeof PokemonMovesSchema>;
export type PokemonSpecies = z.infer<typeof PokemonSpeciesSchema>;
export type PokemonSprites = z.infer<typeof PokemonSpritesSchema>;
export type PokemonStats = z.infer<typeof PokemonStatsSchema>;
export type PokemonTypes = z.infer<typeof PokemonTypesSchema>;
export type PokemonAbilitiesAbility = z.infer<typeof PokemonAbilitiesAbilitySchema>;
export type PokemonGameIndicesVersion = z.infer<typeof PokemonGameIndicesVersionSchema>;
export type PokemonMovesMove = z.infer<typeof PokemonMovesMoveSchema>;
export type PokemonMovesVersionGroupDetails = z.infer<typeof PokemonMovesVersionGroupDetailsSchema>;
export type PokemonMovesVersionGroupDetailsMoveLearnMethod = z.infer<typeof PokemonMovesVersionGroupDetailsMoveLearnMethodSchema>;
export type PokemonMovesVersionGroupDetailsVersionGroup = z.infer<typeof PokemonMovesVersionGroupDetailsVersionGroupSchema>;
export type PokemonSpritesOther = z.infer<typeof PokemonSpritesOtherSchema>;
export type PokemonSpritesVersions = z.infer<typeof PokemonSpritesVersionsSchema>;
export type PokemonSpritesOtherDreamWorld = z.infer<typeof PokemonSpritesOtherDreamWorldSchema>;
export type PokemonSpritesOtherOfficialArtwork = z.infer<typeof PokemonSpritesOtherOfficialArtworkSchema>;
export type PokemonSpritesVersionsGenerationI = z.infer<typeof PokemonSpritesVersionsGenerationISchema>;
export type PokemonSpritesVersionsGenerationIi = z.infer<typeof PokemonSpritesVersionsGenerationIiSchema>;
export type PokemonSpritesVersionsGenerationIii = z.infer<typeof PokemonSpritesVersionsGenerationIiiSchema>;
export type PokemonSpritesVersionsGenerationIv = z.infer<typeof PokemonSpritesVersionsGenerationIvSchema>;
export type PokemonSpritesVersionsGenerationV = z.infer<typeof PokemonSpritesVersionsGenerationVSchema>;
export type PokemonSpritesVersionsGenerationVi = z.infer<typeof PokemonSpritesVersionsGenerationViSchema>;
export type PokemonSpritesVersionsGenerationVii = z.infer<typeof PokemonSpritesVersionsGenerationViiSchema>;
export type PokemonSpritesVersionsGenerationViii = z.infer<typeof PokemonSpritesVersionsGenerationViiiSchema>;
export type PokemonSpritesVersionsGenerationIRedBlue = z.infer<typeof PokemonSpritesVersionsGenerationIRedBlueSchema>;
export type PokemonSpritesVersionsGenerationIYellow = z.infer<typeof PokemonSpritesVersionsGenerationIYellowSchema>;
export type PokemonSpritesVersionsGenerationIiCrystal = z.infer<typeof PokemonSpritesVersionsGenerationIiCrystalSchema>;
export type PokemonSpritesVersionsGenerationIiGold = z.infer<typeof PokemonSpritesVersionsGenerationIiGoldSchema>;
export type PokemonSpritesVersionsGenerationIiSilver = z.infer<typeof PokemonSpritesVersionsGenerationIiSilverSchema>;
export type PokemonSpritesVersionsGenerationIiiEmerald = z.infer<typeof PokemonSpritesVersionsGenerationIiiEmeraldSchema>;
export type PokemonSpritesVersionsGenerationIiiFireredLeafgreen = z.infer<typeof PokemonSpritesVersionsGenerationIiiFireredLeafgreenSchema>;
export type PokemonSpritesVersionsGenerationIiiRubySapphire = z.infer<typeof PokemonSpritesVersionsGenerationIiiRubySapphireSchema>;
export type PokemonSpritesVersionsGenerationIvDiamondPearl = z.infer<typeof PokemonSpritesVersionsGenerationIvDiamondPearlSchema>;
export type PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver = z.infer<typeof PokemonSpritesVersionsGenerationIvHeartgoldSoulsilverSchema>;
export type PokemonSpritesVersionsGenerationIvPlatinum = z.infer<typeof PokemonSpritesVersionsGenerationIvPlatinumSchema>;
export type PokemonSpritesVersionsGenerationVBlackWhite = z.infer<typeof PokemonSpritesVersionsGenerationVBlackWhiteSchema>;
export type PokemonSpritesVersionsGenerationVBlackWhiteAnimated = z.infer<typeof PokemonSpritesVersionsGenerationVBlackWhiteAnimatedSchema>;
export type PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire = z.infer<typeof PokemonSpritesVersionsGenerationViOmegarubyAlphasapphireSchema>;
export type PokemonSpritesVersionsGenerationViXY = z.infer<typeof PokemonSpritesVersionsGenerationViXYSchema>;
export type PokemonSpritesVersionsGenerationViiIcons = z.infer<typeof PokemonSpritesVersionsGenerationViiIconsSchema>;
export type PokemonSpritesVersionsGenerationViiUltraSunUltraMoon = z.infer<typeof PokemonSpritesVersionsGenerationViiUltraSunUltraMoonSchema>;
export type PokemonSpritesVersionsGenerationViiiIcons = z.infer<typeof PokemonSpritesVersionsGenerationViiiIconsSchema>;
export type PokemonStatsStat = z.infer<typeof PokemonStatsStatSchema>;
export type PokemonTypesType = z.infer<typeof PokemonTypesTypeSchema>;
"
`;

exports[`#zod can emit migration for pokemon json, w/ dense & trim fields 1`] = `
"import { z } from \\"zod\\";


export const PokemonSchema = z.object({
  abilities: z.lazy(() => AbilitiesSchema),
  base_experience: z.number(),
  forms: z.lazy(() => FormsSchema),
  game_indices: z.lazy(() => GameIndicesSchema),
  height: z.number(),
  held_items: z.array(),
  id: z.number(),
  is_default: z.boolean(),
  location_area_encounters: z.string(),
  moves: z.lazy(() => MovesSchema),
  name: z.string(),
  order: z.number(),
  species: z.lazy(() => SpeciesSchema),
  sprites: z.lazy(() => SpritesSchema),
  stats: z.lazy(() => StatsSchema),
  types: z.lazy(() => TypesSchema),
  weight: z.number()
});
export const AbilitiesSchema = z.object({
  ability: z.lazy(() => NameUrlSchema),
  is_hidden: z.boolean(),
  slot: z.number()
});
export const GameIndicesSchema = z.object({
  game_index: z.number(),
  version: z.lazy(() => NameUrlSchema)
});
export const MovesSchema = z.object({
  move: z.lazy(() => NameUrlSchema),
  version_group_details: z.lazy(() => VersionGroupDetailsSchema)
});
export const SpritesSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any(),
  other: z.lazy(() => OtherSchema),
  versions: z.lazy(() => VersionsSchema)
});
export const StatsSchema = z.object({
  base_stat: z.number(),
  effort: z.number(),
  stat: z.lazy(() => NameUrlSchema)
});
export const TypesSchema = z.object({
  slot: z.number(),
  type: z.lazy(() => NameUrlSchema)
});
export const VersionGroupDetailsSchema = z.object({
  level_learned_at: z.number(),
  move_learn_method: z.lazy(() => NameUrlSchema),
  version_group: z.lazy(() => NameUrlSchema)
});
export const OtherSchema = z.object({
  dream_world: z.lazy(() => FrontDefaultFrontFemaleSchema),
  officialartwork: z.lazy(() => OfficialArtworkSchema)
});
export const VersionsSchema = z.object({
  generationi: z.lazy(() => GenerationISchema),
  generationii: z.lazy(() => GenerationIiSchema),
  generationiii: z.lazy(() => GenerationIiiSchema),
  generationiv: z.lazy(() => GenerationIvSchema),
  generationv: z.lazy(() => GenerationVSchema),
  generationvi: z.lazy(() => GenerationViSchema),
  generationvii: z.lazy(() => GenerationViiSchema),
  generationviii: z.lazy(() => GenerationViiiSchema)
});
export const OfficialArtworkSchema = z.object({
  front_default: z.string()
});
export const GenerationISchema = z.object({
  redblue: z.lazy(() => RedBlueYellowSchema),
  yellow: z.lazy(() => RedBlueYellowSchema)
});
export const GenerationIiSchema = z.object({
  crystal: z.lazy(() => CrystalSchema),
  gold: z.lazy(() => GoldSchema),
  silver: z.lazy(() => SilverSchema)
});
export const GenerationIiiSchema = z.object({
  emerald: z.lazy(() => EmeraldSchema),
  fireredleafgreen: z.lazy(() => FireredLeafgreenSchema),
  rubysapphire: z.lazy(() => RubySapphireSchema)
});
export const GenerationIvSchema = z.object({
  diamondpearl: z.lazy(() => AnimatedDiamondPearlHeartgoldSoulsilverPlatinumSchema),
  heartgoldsoulsilver: z.lazy(() => AnimatedDiamondPearlHeartgoldSoulsilverPlatinumSchema),
  platinum: z.lazy(() => AnimatedDiamondPearlHeartgoldSoulsilverPlatinumSchema)
});
export const GenerationVSchema = z.object({
  blackwhite: z.lazy(() => BlackWhiteSchema)
});
export const GenerationViSchema = z.object({
  omegarubyalphasapphire: z.lazy(() => OmegarubyAlphasapphireUltraSunUltraMoonXYSchema),
  xy: z.lazy(() => OmegarubyAlphasapphireUltraSunUltraMoonXYSchema)
});
export const GenerationViiSchema = z.object({
  icons: z.lazy(() => FrontDefaultFrontFemaleSchema),
  ultrasunultramoon: z.lazy(() => OmegarubyAlphasapphireUltraSunUltraMoonXYSchema)
});
export const GenerationViiiSchema = z.object({
  icons: z.lazy(() => FrontDefaultFrontFemaleSchema)
});
export const CrystalSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const GoldSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const SilverSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const EmeraldSchema = z.object({
  front_default: z.string(),
  front_shiny: z.string()
});
export const FireredLeafgreenSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const RubySapphireSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const BlackWhiteSchema = z.object({
  animated: z.lazy(() => AnimatedDiamondPearlHeartgoldSoulsilverPlatinumSchema),
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const NameUrlSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const FrontDefaultFrontFemaleSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const RedBlueYellowSchema = z.object({
  back_default: z.string(),
  back_gray: z.string(),
  front_default: z.string(),
  front_gray: z.string()
});
export const AnimatedDiamondPearlHeartgoldSoulsilverPlatinumSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const OmegarubyAlphasapphireUltraSunUltraMoonXYSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export type Pokemon = z.infer<typeof PokemonSchema>;
export type Abilities = z.infer<typeof AbilitiesSchema>;
export type GameIndices = z.infer<typeof GameIndicesSchema>;
export type Moves = z.infer<typeof MovesSchema>;
export type Sprites = z.infer<typeof SpritesSchema>;
export type Stats = z.infer<typeof StatsSchema>;
export type Types = z.infer<typeof TypesSchema>;
export type VersionGroupDetails = z.infer<typeof VersionGroupDetailsSchema>;
export type Other = z.infer<typeof OtherSchema>;
export type Versions = z.infer<typeof VersionsSchema>;
export type OfficialArtwork = z.infer<typeof OfficialArtworkSchema>;
export type GenerationI = z.infer<typeof GenerationISchema>;
export type GenerationIi = z.infer<typeof GenerationIiSchema>;
export type GenerationIii = z.infer<typeof GenerationIiiSchema>;
export type GenerationIv = z.infer<typeof GenerationIvSchema>;
export type GenerationV = z.infer<typeof GenerationVSchema>;
export type GenerationVi = z.infer<typeof GenerationViSchema>;
export type GenerationVii = z.infer<typeof GenerationViiSchema>;
export type GenerationViii = z.infer<typeof GenerationViiiSchema>;
export type Crystal = z.infer<typeof CrystalSchema>;
export type Gold = z.infer<typeof GoldSchema>;
export type Silver = z.infer<typeof SilverSchema>;
export type Emerald = z.infer<typeof EmeraldSchema>;
export type FireredLeafgreen = z.infer<typeof FireredLeafgreenSchema>;
export type RubySapphire = z.infer<typeof RubySapphireSchema>;
export type BlackWhite = z.infer<typeof BlackWhiteSchema>;
export type NameUrl = z.infer<typeof NameUrlSchema>;
export type FrontDefaultFrontFemale = z.infer<typeof FrontDefaultFrontFemaleSchema>;
export type RedBlueYellow = z.infer<typeof RedBlueYellowSchema>;
export type AnimatedDiamondPearlHeartgoldSoulsilverPlatinum = z.infer<typeof AnimatedDiamondPearlHeartgoldSoulsilverPlatinumSchema>;
export type OmegarubyAlphasapphireUltraSunUltraMoonXY = z.infer<typeof OmegarubyAlphasapphireUltraSunUltraMoonXYSchema>;
"
`;

exports[`#zod can emit migration for pokemon json, w/ dense fields 1`] = `
"import { z } from \\"zod\\";


export const PokemonSchema = z.object({
  abilities: z.lazy(() => PokemonAbilitiesSchema),
  base_experience: z.number(),
  forms: z.lazy(() => PokemonFormsSchema),
  game_indices: z.lazy(() => PokemonGameIndicesSchema),
  height: z.number(),
  held_items: z.array(),
  id: z.number(),
  is_default: z.boolean(),
  location_area_encounters: z.string(),
  moves: z.lazy(() => PokemonMovesSchema),
  name: z.string(),
  order: z.number(),
  species: z.lazy(() => PokemonSpeciesSchema),
  sprites: z.lazy(() => PokemonSpritesSchema),
  stats: z.lazy(() => PokemonStatsSchema),
  types: z.lazy(() => PokemonTypesSchema),
  weight: z.number()
});
export const PokemonAbilitiesSchema = z.object({
  ability: z.lazy(() => NameUrlSchema),
  is_hidden: z.boolean(),
  slot: z.number()
});
export const PokemonGameIndicesSchema = z.object({
  game_index: z.number(),
  version: z.lazy(() => NameUrlSchema)
});
export const PokemonMovesSchema = z.object({
  move: z.lazy(() => NameUrlSchema),
  version_group_details: z.lazy(() => PokemonMovesVersionGroupDetailsSchema)
});
export const PokemonSpritesSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any(),
  other: z.lazy(() => PokemonSpritesOtherSchema),
  versions: z.lazy(() => PokemonSpritesVersionsSchema)
});
export const PokemonStatsSchema = z.object({
  base_stat: z.number(),
  effort: z.number(),
  stat: z.lazy(() => NameUrlSchema)
});
export const PokemonTypesSchema = z.object({
  slot: z.number(),
  type: z.lazy(() => NameUrlSchema)
});
export const PokemonMovesVersionGroupDetailsSchema = z.object({
  level_learned_at: z.number(),
  move_learn_method: z.lazy(() => NameUrlSchema),
  version_group: z.lazy(() => NameUrlSchema)
});
export const PokemonSpritesOtherSchema = z.object({
  dream_world: z.lazy(() => FrontDefaultFrontFemaleSchema),
  officialartwork: z.lazy(() => PokemonSpritesOtherOfficialArtworkSchema)
});
export const PokemonSpritesVersionsSchema = z.object({
  generationi: z.lazy(() => PokemonSpritesVersionsGenerationISchema),
  generationii: z.lazy(() => PokemonSpritesVersionsGenerationIiSchema),
  generationiii: z.lazy(() => PokemonSpritesVersionsGenerationIiiSchema),
  generationiv: z.lazy(() => PokemonSpritesVersionsGenerationIvSchema),
  generationv: z.lazy(() => PokemonSpritesVersionsGenerationVSchema),
  generationvi: z.lazy(() => PokemonSpritesVersionsGenerationViSchema),
  generationvii: z.lazy(() => PokemonSpritesVersionsGenerationViiSchema),
  generationviii: z.lazy(() => PokemonSpritesVersionsGenerationViiiSchema)
});
export const PokemonSpritesOtherOfficialArtworkSchema = z.object({
  front_default: z.string()
});
export const PokemonSpritesVersionsGenerationISchema = z.object({
  redblue: z.lazy(() => RedBlueYellowSchema),
  yellow: z.lazy(() => RedBlueYellowSchema)
});
export const PokemonSpritesVersionsGenerationIiSchema = z.object({
  crystal: z.lazy(() => PokemonSpritesVersionsGenerationIiCrystalSchema),
  gold: z.lazy(() => PokemonSpritesVersionsGenerationIiGoldSchema),
  silver: z.lazy(() => PokemonSpritesVersionsGenerationIiSilverSchema)
});
export const PokemonSpritesVersionsGenerationIiiSchema = z.object({
  emerald: z.lazy(() => PokemonSpritesVersionsGenerationIiiEmeraldSchema),
  fireredleafgreen: z.lazy(() => PokemonSpritesVersionsGenerationIiiFireredLeafgreenSchema),
  rubysapphire: z.lazy(() => PokemonSpritesVersionsGenerationIiiRubySapphireSchema)
});
export const PokemonSpritesVersionsGenerationIvSchema = z.object({
  diamondpearl: z.lazy(() => PokemonSpritesVersionsGenerationIvDiamondPearlSchema),
  heartgoldsoulsilver: z.lazy(() => PokemonSpritesVersionsGenerationIvHeartgoldSoulsilverSchema),
  platinum: z.lazy(() => PokemonSpritesVersionsGenerationIvPlatinumSchema)
});
export const PokemonSpritesVersionsGenerationVSchema = z.object({
  blackwhite: z.lazy(() => PokemonSpritesVersionsGenerationVBlackWhiteSchema)
});
export const PokemonSpritesVersionsGenerationViSchema = z.object({
  omegarubyalphasapphire: z.lazy(() => GenerationViiOmegarubyAlphasapphireUltraSunUltraMoonXYSchema),
  xy: z.lazy(() => GenerationViiOmegarubyAlphasapphireUltraSunUltraMoonXYSchema)
});
export const PokemonSpritesVersionsGenerationViiSchema = z.object({
  icons: z.lazy(() => FrontDefaultFrontFemaleSchema),
  ultrasunultramoon: z.lazy(() => GenerationViiOmegarubyAlphasapphireUltraSunUltraMoonXYSchema)
});
export const PokemonSpritesVersionsGenerationViiiSchema = z.object({
  icons: z.lazy(() => FrontDefaultFrontFemaleSchema)
});
export const PokemonSpritesVersionsGenerationIiCrystalSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiGoldSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiSilverSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiiEmeraldSchema = z.object({
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiiFireredLeafgreenSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiiRubySapphireSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIvDiamondPearlSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationIvHeartgoldSoulsilverSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationIvPlatinumSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationVBlackWhiteSchema = z.object({
  animated: z.lazy(() => PokemonSpritesVersionsGenerationVBlackWhiteAnimatedSchema),
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationVBlackWhiteAnimatedSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const NameUrlSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const FrontDefaultFrontFemaleSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const RedBlueYellowSchema = z.object({
  back_default: z.string(),
  back_gray: z.string(),
  front_default: z.string(),
  front_gray: z.string()
});
export const GenerationViiOmegarubyAlphasapphireUltraSunUltraMoonXYSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export type Pokemon = z.infer<typeof PokemonSchema>;
export type PokemonAbilities = z.infer<typeof PokemonAbilitiesSchema>;
export type PokemonGameIndices = z.infer<typeof PokemonGameIndicesSchema>;
export type PokemonMoves = z.infer<typeof PokemonMovesSchema>;
export type PokemonSprites = z.infer<typeof PokemonSpritesSchema>;
export type PokemonStats = z.infer<typeof PokemonStatsSchema>;
export type PokemonTypes = z.infer<typeof PokemonTypesSchema>;
export type PokemonMovesVersionGroupDetails = z.infer<typeof PokemonMovesVersionGroupDetailsSchema>;
export type PokemonSpritesOther = z.infer<typeof PokemonSpritesOtherSchema>;
export type PokemonSpritesVersions = z.infer<typeof PokemonSpritesVersionsSchema>;
export type PokemonSpritesOtherOfficialArtwork = z.infer<typeof PokemonSpritesOtherOfficialArtworkSchema>;
export type PokemonSpritesVersionsGenerationI = z.infer<typeof PokemonSpritesVersionsGenerationISchema>;
export type PokemonSpritesVersionsGenerationIi = z.infer<typeof PokemonSpritesVersionsGenerationIiSchema>;
export type PokemonSpritesVersionsGenerationIii = z.infer<typeof PokemonSpritesVersionsGenerationIiiSchema>;
export type PokemonSpritesVersionsGenerationIv = z.infer<typeof PokemonSpritesVersionsGenerationIvSchema>;
export type PokemonSpritesVersionsGenerationV = z.infer<typeof PokemonSpritesVersionsGenerationVSchema>;
export type PokemonSpritesVersionsGenerationVi = z.infer<typeof PokemonSpritesVersionsGenerationViSchema>;
export type PokemonSpritesVersionsGenerationVii = z.infer<typeof PokemonSpritesVersionsGenerationViiSchema>;
export type PokemonSpritesVersionsGenerationViii = z.infer<typeof PokemonSpritesVersionsGenerationViiiSchema>;
export type PokemonSpritesVersionsGenerationIiCrystal = z.infer<typeof PokemonSpritesVersionsGenerationIiCrystalSchema>;
export type PokemonSpritesVersionsGenerationIiGold = z.infer<typeof PokemonSpritesVersionsGenerationIiGoldSchema>;
export type PokemonSpritesVersionsGenerationIiSilver = z.infer<typeof PokemonSpritesVersionsGenerationIiSilverSchema>;
export type PokemonSpritesVersionsGenerationIiiEmerald = z.infer<typeof PokemonSpritesVersionsGenerationIiiEmeraldSchema>;
export type PokemonSpritesVersionsGenerationIiiFireredLeafgreen = z.infer<typeof PokemonSpritesVersionsGenerationIiiFireredLeafgreenSchema>;
export type PokemonSpritesVersionsGenerationIiiRubySapphire = z.infer<typeof PokemonSpritesVersionsGenerationIiiRubySapphireSchema>;
export type PokemonSpritesVersionsGenerationIvDiamondPearl = z.infer<typeof PokemonSpritesVersionsGenerationIvDiamondPearlSchema>;
export type PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver = z.infer<typeof PokemonSpritesVersionsGenerationIvHeartgoldSoulsilverSchema>;
export type PokemonSpritesVersionsGenerationIvPlatinum = z.infer<typeof PokemonSpritesVersionsGenerationIvPlatinumSchema>;
export type PokemonSpritesVersionsGenerationVBlackWhite = z.infer<typeof PokemonSpritesVersionsGenerationVBlackWhiteSchema>;
export type PokemonSpritesVersionsGenerationVBlackWhiteAnimated = z.infer<typeof PokemonSpritesVersionsGenerationVBlackWhiteAnimatedSchema>;
export type NameUrl = z.infer<typeof NameUrlSchema>;
export type FrontDefaultFrontFemale = z.infer<typeof FrontDefaultFrontFemaleSchema>;
export type RedBlueYellow = z.infer<typeof RedBlueYellowSchema>;
export type GenerationViiOmegarubyAlphasapphireUltraSunUltraMoonXY = z.infer<typeof GenerationViiOmegarubyAlphasapphireUltraSunUltraMoonXYSchema>;
"
`;

exports[`#zod can emit module exports correctly 1`] = `
"import { z } from \\"zod\\";


export const PokemonSchema = z.object({
  abilities: z.lazy(() => PokemonAbilitiesSchema),
  base_experience: z.number(),
  forms: z.lazy(() => PokemonFormsSchema),
  game_indices: z.lazy(() => PokemonGameIndicesSchema),
  height: z.number(),
  held_items: z.array(),
  id: z.number(),
  is_default: z.boolean(),
  location_area_encounters: z.string(),
  moves: z.lazy(() => PokemonMovesSchema),
  name: z.string(),
  order: z.number(),
  species: z.lazy(() => PokemonSpeciesSchema),
  sprites: z.lazy(() => PokemonSpritesSchema),
  stats: z.lazy(() => PokemonStatsSchema),
  types: z.lazy(() => PokemonTypesSchema),
  weight: z.number()
});
export const PokemonAbilitiesSchema = z.object({
  ability: z.lazy(() => PokemonAbilitiesAbilitySchema),
  is_hidden: z.boolean(),
  slot: z.number()
});
export const PokemonFormsSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonGameIndicesSchema = z.object({
  game_index: z.number(),
  version: z.lazy(() => PokemonGameIndicesVersionSchema)
});
export const PokemonMovesSchema = z.object({
  move: z.lazy(() => PokemonMovesMoveSchema),
  version_group_details: z.lazy(() => PokemonMovesVersionGroupDetailsSchema)
});
export const PokemonSpeciesSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonSpritesSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any(),
  other: z.lazy(() => PokemonSpritesOtherSchema),
  versions: z.lazy(() => PokemonSpritesVersionsSchema)
});
export const PokemonStatsSchema = z.object({
  base_stat: z.number(),
  effort: z.number(),
  stat: z.lazy(() => PokemonStatsStatSchema)
});
export const PokemonTypesSchema = z.object({
  slot: z.number(),
  type: z.lazy(() => PokemonTypesTypeSchema)
});
export const PokemonAbilitiesAbilitySchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonGameIndicesVersionSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonMovesMoveSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonMovesVersionGroupDetailsSchema = z.object({
  level_learned_at: z.number(),
  move_learn_method: z.lazy(() => PokemonMovesVersionGroupDetailsMoveLearnMethodSchema),
  version_group: z.lazy(() => PokemonMovesVersionGroupDetailsVersionGroupSchema)
});
export const PokemonMovesVersionGroupDetailsMoveLearnMethodSchema = z.object({
  name: z.string().enum([\\"machine\\", \\"tutor\\", \\"level-up\\", \\"egg\\"]),
  url: z.string().enum([\\"https://pokeapi.co/api/v2/move-learn-method/4/\\", \\"https://pokeapi.co/api/v2/move-learn-method/3/\\", \\"https://pokeapi.co/api/v2/move-learn-method/1/\\", \\"https://pokeapi.co/api/v2/move-learn-method/2/\\"])
});
export const PokemonMovesVersionGroupDetailsVersionGroupSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonSpritesOtherSchema = z.object({
  dream_world: z.lazy(() => PokemonSpritesOtherDreamWorldSchema),
  officialartwork: z.lazy(() => PokemonSpritesOtherOfficialArtworkSchema)
});
export const PokemonSpritesVersionsSchema = z.object({
  generationi: z.lazy(() => PokemonSpritesVersionsGenerationISchema),
  generationii: z.lazy(() => PokemonSpritesVersionsGenerationIiSchema),
  generationiii: z.lazy(() => PokemonSpritesVersionsGenerationIiiSchema),
  generationiv: z.lazy(() => PokemonSpritesVersionsGenerationIvSchema),
  generationv: z.lazy(() => PokemonSpritesVersionsGenerationVSchema),
  generationvi: z.lazy(() => PokemonSpritesVersionsGenerationViSchema),
  generationvii: z.lazy(() => PokemonSpritesVersionsGenerationViiSchema),
  generationviii: z.lazy(() => PokemonSpritesVersionsGenerationViiiSchema)
});
export const PokemonSpritesOtherDreamWorldSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const PokemonSpritesOtherOfficialArtworkSchema = z.object({
  front_default: z.string()
});
export const PokemonSpritesVersionsGenerationISchema = z.object({
  redblue: z.lazy(() => PokemonSpritesVersionsGenerationIRedBlueSchema),
  yellow: z.lazy(() => PokemonSpritesVersionsGenerationIYellowSchema)
});
export const PokemonSpritesVersionsGenerationIiSchema = z.object({
  crystal: z.lazy(() => PokemonSpritesVersionsGenerationIiCrystalSchema),
  gold: z.lazy(() => PokemonSpritesVersionsGenerationIiGoldSchema),
  silver: z.lazy(() => PokemonSpritesVersionsGenerationIiSilverSchema)
});
export const PokemonSpritesVersionsGenerationIiiSchema = z.object({
  emerald: z.lazy(() => PokemonSpritesVersionsGenerationIiiEmeraldSchema),
  fireredleafgreen: z.lazy(() => PokemonSpritesVersionsGenerationIiiFireredLeafgreenSchema),
  rubysapphire: z.lazy(() => PokemonSpritesVersionsGenerationIiiRubySapphireSchema)
});
export const PokemonSpritesVersionsGenerationIvSchema = z.object({
  diamondpearl: z.lazy(() => PokemonSpritesVersionsGenerationIvDiamondPearlSchema),
  heartgoldsoulsilver: z.lazy(() => PokemonSpritesVersionsGenerationIvHeartgoldSoulsilverSchema),
  platinum: z.lazy(() => PokemonSpritesVersionsGenerationIvPlatinumSchema)
});
export const PokemonSpritesVersionsGenerationVSchema = z.object({
  blackwhite: z.lazy(() => PokemonSpritesVersionsGenerationVBlackWhiteSchema)
});
export const PokemonSpritesVersionsGenerationViSchema = z.object({
  omegarubyalphasapphire: z.lazy(() => PokemonSpritesVersionsGenerationViOmegarubyAlphasapphireSchema),
  xy: z.lazy(() => PokemonSpritesVersionsGenerationViXYSchema)
});
export const PokemonSpritesVersionsGenerationViiSchema = z.object({
  icons: z.lazy(() => PokemonSpritesVersionsGenerationViiIconsSchema),
  ultrasunultramoon: z.lazy(() => PokemonSpritesVersionsGenerationViiUltraSunUltraMoonSchema)
});
export const PokemonSpritesVersionsGenerationViiiSchema = z.object({
  icons: z.lazy(() => PokemonSpritesVersionsGenerationViiiIconsSchema)
});
export const PokemonSpritesVersionsGenerationIRedBlueSchema = z.object({
  back_default: z.string(),
  back_gray: z.string(),
  front_default: z.string(),
  front_gray: z.string()
});
export const PokemonSpritesVersionsGenerationIYellowSchema = z.object({
  back_default: z.string(),
  back_gray: z.string(),
  front_default: z.string(),
  front_gray: z.string()
});
export const PokemonSpritesVersionsGenerationIiCrystalSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiGoldSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiSilverSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiiEmeraldSchema = z.object({
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiiFireredLeafgreenSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIiiRubySapphireSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const PokemonSpritesVersionsGenerationIvDiamondPearlSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationIvHeartgoldSoulsilverSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationIvPlatinumSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationVBlackWhiteSchema = z.object({
  animated: z.lazy(() => PokemonSpritesVersionsGenerationVBlackWhiteAnimatedSchema),
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationVBlackWhiteAnimatedSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationViOmegarubyAlphasapphireSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationViXYSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationViiIconsSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const PokemonSpritesVersionsGenerationViiUltraSunUltraMoonSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PokemonSpritesVersionsGenerationViiiIconsSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const PokemonStatsStatSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const PokemonTypesTypeSchema = z.object({
  name: z.string(),
  url: z.string()
});
export type Pokemon = z.infer<typeof PokemonSchema>;
export type PokemonAbilities = z.infer<typeof PokemonAbilitiesSchema>;
export type PokemonForms = z.infer<typeof PokemonFormsSchema>;
export type PokemonGameIndices = z.infer<typeof PokemonGameIndicesSchema>;
export type PokemonMoves = z.infer<typeof PokemonMovesSchema>;
export type PokemonSpecies = z.infer<typeof PokemonSpeciesSchema>;
export type PokemonSprites = z.infer<typeof PokemonSpritesSchema>;
export type PokemonStats = z.infer<typeof PokemonStatsSchema>;
export type PokemonTypes = z.infer<typeof PokemonTypesSchema>;
export type PokemonAbilitiesAbility = z.infer<typeof PokemonAbilitiesAbilitySchema>;
export type PokemonGameIndicesVersion = z.infer<typeof PokemonGameIndicesVersionSchema>;
export type PokemonMovesMove = z.infer<typeof PokemonMovesMoveSchema>;
export type PokemonMovesVersionGroupDetails = z.infer<typeof PokemonMovesVersionGroupDetailsSchema>;
export type PokemonMovesVersionGroupDetailsMoveLearnMethod = z.infer<typeof PokemonMovesVersionGroupDetailsMoveLearnMethodSchema>;
export type PokemonMovesVersionGroupDetailsVersionGroup = z.infer<typeof PokemonMovesVersionGroupDetailsVersionGroupSchema>;
export type PokemonSpritesOther = z.infer<typeof PokemonSpritesOtherSchema>;
export type PokemonSpritesVersions = z.infer<typeof PokemonSpritesVersionsSchema>;
export type PokemonSpritesOtherDreamWorld = z.infer<typeof PokemonSpritesOtherDreamWorldSchema>;
export type PokemonSpritesOtherOfficialArtwork = z.infer<typeof PokemonSpritesOtherOfficialArtworkSchema>;
export type PokemonSpritesVersionsGenerationI = z.infer<typeof PokemonSpritesVersionsGenerationISchema>;
export type PokemonSpritesVersionsGenerationIi = z.infer<typeof PokemonSpritesVersionsGenerationIiSchema>;
export type PokemonSpritesVersionsGenerationIii = z.infer<typeof PokemonSpritesVersionsGenerationIiiSchema>;
export type PokemonSpritesVersionsGenerationIv = z.infer<typeof PokemonSpritesVersionsGenerationIvSchema>;
export type PokemonSpritesVersionsGenerationV = z.infer<typeof PokemonSpritesVersionsGenerationVSchema>;
export type PokemonSpritesVersionsGenerationVi = z.infer<typeof PokemonSpritesVersionsGenerationViSchema>;
export type PokemonSpritesVersionsGenerationVii = z.infer<typeof PokemonSpritesVersionsGenerationViiSchema>;
export type PokemonSpritesVersionsGenerationViii = z.infer<typeof PokemonSpritesVersionsGenerationViiiSchema>;
export type PokemonSpritesVersionsGenerationIRedBlue = z.infer<typeof PokemonSpritesVersionsGenerationIRedBlueSchema>;
export type PokemonSpritesVersionsGenerationIYellow = z.infer<typeof PokemonSpritesVersionsGenerationIYellowSchema>;
export type PokemonSpritesVersionsGenerationIiCrystal = z.infer<typeof PokemonSpritesVersionsGenerationIiCrystalSchema>;
export type PokemonSpritesVersionsGenerationIiGold = z.infer<typeof PokemonSpritesVersionsGenerationIiGoldSchema>;
export type PokemonSpritesVersionsGenerationIiSilver = z.infer<typeof PokemonSpritesVersionsGenerationIiSilverSchema>;
export type PokemonSpritesVersionsGenerationIiiEmerald = z.infer<typeof PokemonSpritesVersionsGenerationIiiEmeraldSchema>;
export type PokemonSpritesVersionsGenerationIiiFireredLeafgreen = z.infer<typeof PokemonSpritesVersionsGenerationIiiFireredLeafgreenSchema>;
export type PokemonSpritesVersionsGenerationIiiRubySapphire = z.infer<typeof PokemonSpritesVersionsGenerationIiiRubySapphireSchema>;
export type PokemonSpritesVersionsGenerationIvDiamondPearl = z.infer<typeof PokemonSpritesVersionsGenerationIvDiamondPearlSchema>;
export type PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver = z.infer<typeof PokemonSpritesVersionsGenerationIvHeartgoldSoulsilverSchema>;
export type PokemonSpritesVersionsGenerationIvPlatinum = z.infer<typeof PokemonSpritesVersionsGenerationIvPlatinumSchema>;
export type PokemonSpritesVersionsGenerationVBlackWhite = z.infer<typeof PokemonSpritesVersionsGenerationVBlackWhiteSchema>;
export type PokemonSpritesVersionsGenerationVBlackWhiteAnimated = z.infer<typeof PokemonSpritesVersionsGenerationVBlackWhiteAnimatedSchema>;
export type PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire = z.infer<typeof PokemonSpritesVersionsGenerationViOmegarubyAlphasapphireSchema>;
export type PokemonSpritesVersionsGenerationViXY = z.infer<typeof PokemonSpritesVersionsGenerationViXYSchema>;
export type PokemonSpritesVersionsGenerationViiIcons = z.infer<typeof PokemonSpritesVersionsGenerationViiIconsSchema>;
export type PokemonSpritesVersionsGenerationViiUltraSunUltraMoon = z.infer<typeof PokemonSpritesVersionsGenerationViiUltraSunUltraMoonSchema>;
export type PokemonSpritesVersionsGenerationViiiIcons = z.infer<typeof PokemonSpritesVersionsGenerationViiiIconsSchema>;
export type PokemonStatsStat = z.infer<typeof PokemonStatsStatSchema>;
export type PokemonTypesType = z.infer<typeof PokemonTypesTypeSchema>;
"
`;

exports[`#zod can emit schema 1`] = `
"import { z } from \\"zod\\";


export const UsersSchema = z.object({
  id: z.string().uuid(),
  email: z.string().min(21).max(29),
  firstName: z.string().min(3).max(10),
  lastName: z.string().min(4).max(11),
  isActive: z.boolean(),
  createdAt: z.date(),
  modifiedAt: z.date(),
  catchPhrase: z.string().min(23).max(48),
  companyName: z.string().min(9).max(20),
  credits: z.number().min(1).max(20).enum([\\"1\\", \\"15\\", \\"20\\", \\"10\\", \\"0\\", \\"11\\", \\"7\\", \\"9\\"]),
  salesScore: z.number().min(0.75129).max(20.9877865),
  location: z.string().min(3).max(6).enum([\\"nyc\\", \\"remote\\", \\"denver\\"]),
  profile: z.string().optional().min(111).max(234)
});
export type Users = z.infer<typeof UsersSchema>;
"
`;

exports[`#zod can emit schema for people json 1`] = `
"import { z } from \\"zod\\";


export const PeopleSchema = z.object({
  name: z.string().min(4).max(21),
  height: z.number().optional().min(66).max(228),
  mass: z.number().optional().min(17).max(140),
  hair_color: z.string().min(3).max(13),
  skin_color: z.string().optional().min(4).max(16),
  eye_color: z.string().min(3).max(9).enum([\\"blue\\", \\"yellow\\", \\"red\\", \\"brown\\", \\"blue-gray\\", \\"black\\", \\"orange\\", \\"hazel\\"]),
  birth_year: z.string().optional().min(4).max(7),
  homeworld: z.string().min(44).max(45),
  films: z.array().min(1).max(7),
  species: z.array().min(1).max(1).length(1, { message: \\"Exact length required: 1\\" }),
  vehicles: z.array().min(1).max(2),
  starships: z.array().min(1).max(5),
  created: z.date(),
  edited: z.date(),
  url: z.string().min(43).max(44),
  id: z.number().min(1).max(42)
});
export type People = z.infer<typeof PeopleSchema>;
"
`;

exports[`#zod can emit schema with better names 1`] = `
"import { z } from \\"zod\\";


export const PokemonSchema = z.object({
  abilities: z.lazy(() => AbilitiesSchema),
  base_experience: z.number(),
  forms: z.lazy(() => FormsSchema),
  game_indices: z.lazy(() => GameIndicesSchema),
  height: z.number(),
  held_items: z.array(),
  id: z.number(),
  is_default: z.boolean(),
  location_area_encounters: z.string(),
  moves: z.lazy(() => MovesSchema),
  name: z.string(),
  order: z.number(),
  species: z.lazy(() => SpeciesSchema),
  sprites: z.lazy(() => SpritesSchema),
  stats: z.lazy(() => StatsSchema),
  types: z.lazy(() => TypesSchema),
  weight: z.number()
});
export const AbilitiesSchema = z.object({
  ability: z.lazy(() => AbilitySchema),
  is_hidden: z.boolean(),
  slot: z.number()
});
export const FormsSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const GameIndicesSchema = z.object({
  game_index: z.number(),
  version: z.lazy(() => VersionSchema)
});
export const MovesSchema = z.object({
  move: z.lazy(() => MoveSchema),
  version_group_details: z.lazy(() => VersionGroupDetailsSchema)
});
export const SpeciesSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const SpritesSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any(),
  other: z.lazy(() => OtherSchema),
  versions: z.lazy(() => VersionsSchema)
});
export const StatsSchema = z.object({
  base_stat: z.number(),
  effort: z.number(),
  stat: z.lazy(() => StatSchema)
});
export const TypesSchema = z.object({
  slot: z.number(),
  type: z.lazy(() => TypeSchema)
});
export const AbilitySchema = z.object({
  name: z.string(),
  url: z.string()
});
export const VersionSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const MoveSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const VersionGroupDetailsSchema = z.object({
  level_learned_at: z.number(),
  move_learn_method: z.lazy(() => MoveLearnMethodSchema),
  version_group: z.lazy(() => VersionGroupSchema)
});
export const MoveLearnMethodSchema = z.object({
  name: z.string().enum([\\"machine\\", \\"tutor\\", \\"level-up\\", \\"egg\\"]),
  url: z.string().enum([\\"https://pokeapi.co/api/v2/move-learn-method/4/\\", \\"https://pokeapi.co/api/v2/move-learn-method/3/\\", \\"https://pokeapi.co/api/v2/move-learn-method/1/\\", \\"https://pokeapi.co/api/v2/move-learn-method/2/\\"])
});
export const VersionGroupSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const OtherSchema = z.object({
  dream_world: z.lazy(() => DreamWorldSchema),
  officialartwork: z.lazy(() => OfficialArtworkSchema)
});
export const VersionsSchema = z.object({
  generationi: z.lazy(() => GenerationISchema),
  generationii: z.lazy(() => GenerationIiSchema),
  generationiii: z.lazy(() => GenerationIiiSchema),
  generationiv: z.lazy(() => GenerationIvSchema),
  generationv: z.lazy(() => GenerationVSchema),
  generationvi: z.lazy(() => GenerationViSchema),
  generationvii: z.lazy(() => GenerationViiSchema),
  generationviii: z.lazy(() => GenerationViiiSchema)
});
export const DreamWorldSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const OfficialArtworkSchema = z.object({
  front_default: z.string()
});
export const GenerationISchema = z.object({
  redblue: z.lazy(() => RedBlueSchema),
  yellow: z.lazy(() => YellowSchema)
});
export const GenerationIiSchema = z.object({
  crystal: z.lazy(() => CrystalSchema),
  gold: z.lazy(() => GoldSchema),
  silver: z.lazy(() => SilverSchema)
});
export const GenerationIiiSchema = z.object({
  emerald: z.lazy(() => EmeraldSchema),
  fireredleafgreen: z.lazy(() => FireredLeafgreenSchema),
  rubysapphire: z.lazy(() => RubySapphireSchema)
});
export const GenerationIvSchema = z.object({
  diamondpearl: z.lazy(() => DiamondPearlSchema),
  heartgoldsoulsilver: z.lazy(() => HeartgoldSoulsilverSchema),
  platinum: z.lazy(() => PlatinumSchema)
});
export const GenerationVSchema = z.object({
  blackwhite: z.lazy(() => BlackWhiteSchema)
});
export const GenerationViSchema = z.object({
  omegarubyalphasapphire: z.lazy(() => OmegarubyAlphasapphireSchema),
  xy: z.lazy(() => XYSchema)
});
export const GenerationViiSchema = z.object({
  icons: z.lazy(() => IconsSchema),
  ultrasunultramoon: z.lazy(() => UltraSunUltraMoonSchema)
});
export const GenerationViiiSchema = z.object({
  icons: z.lazy(() => IconsSchema)
});
export const RedBlueSchema = z.object({
  back_default: z.string(),
  back_gray: z.string(),
  front_default: z.string(),
  front_gray: z.string()
});
export const YellowSchema = z.object({
  back_default: z.string(),
  back_gray: z.string(),
  front_default: z.string(),
  front_gray: z.string()
});
export const CrystalSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const GoldSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const SilverSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const EmeraldSchema = z.object({
  front_default: z.string(),
  front_shiny: z.string()
});
export const FireredLeafgreenSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const RubySapphireSchema = z.object({
  back_default: z.string(),
  back_shiny: z.string(),
  front_default: z.string(),
  front_shiny: z.string()
});
export const DiamondPearlSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const HeartgoldSoulsilverSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const PlatinumSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const BlackWhiteSchema = z.object({
  animated: z.lazy(() => AnimatedSchema),
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const AnimatedSchema = z.object({
  back_default: z.string(),
  back_female: z.any(),
  back_shiny: z.string(),
  back_shiny_female: z.any(),
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const OmegarubyAlphasapphireSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const XYSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const IconsSchema = z.object({
  front_default: z.string(),
  front_female: z.any()
});
export const UltraSunUltraMoonSchema = z.object({
  front_default: z.string(),
  front_female: z.any(),
  front_shiny: z.string(),
  front_shiny_female: z.any()
});
export const StatSchema = z.object({
  name: z.string(),
  url: z.string()
});
export const TypeSchema = z.object({
  name: z.string(),
  url: z.string()
});
export type Pokemon = z.infer<typeof PokemonSchema>;
export type Abilities = z.infer<typeof AbilitiesSchema>;
export type Forms = z.infer<typeof FormsSchema>;
export type GameIndices = z.infer<typeof GameIndicesSchema>;
export type Moves = z.infer<typeof MovesSchema>;
export type Species = z.infer<typeof SpeciesSchema>;
export type Sprites = z.infer<typeof SpritesSchema>;
export type Stats = z.infer<typeof StatsSchema>;
export type Types = z.infer<typeof TypesSchema>;
export type Ability = z.infer<typeof AbilitySchema>;
export type Version = z.infer<typeof VersionSchema>;
export type Move = z.infer<typeof MoveSchema>;
export type VersionGroupDetails = z.infer<typeof VersionGroupDetailsSchema>;
export type MoveLearnMethod = z.infer<typeof MoveLearnMethodSchema>;
export type VersionGroup = z.infer<typeof VersionGroupSchema>;
export type Other = z.infer<typeof OtherSchema>;
export type Versions = z.infer<typeof VersionsSchema>;
export type DreamWorld = z.infer<typeof DreamWorldSchema>;
export type OfficialArtwork = z.infer<typeof OfficialArtworkSchema>;
export type GenerationI = z.infer<typeof GenerationISchema>;
export type GenerationIi = z.infer<typeof GenerationIiSchema>;
export type GenerationIii = z.infer<typeof GenerationIiiSchema>;
export type GenerationIv = z.infer<typeof GenerationIvSchema>;
export type GenerationV = z.infer<typeof GenerationVSchema>;
export type GenerationVi = z.infer<typeof GenerationViSchema>;
export type GenerationVii = z.infer<typeof GenerationViiSchema>;
export type GenerationViii = z.infer<typeof GenerationViiiSchema>;
export type RedBlue = z.infer<typeof RedBlueSchema>;
export type Yellow = z.infer<typeof YellowSchema>;
export type Crystal = z.infer<typeof CrystalSchema>;
export type Gold = z.infer<typeof GoldSchema>;
export type Silver = z.infer<typeof SilverSchema>;
export type Emerald = z.infer<typeof EmeraldSchema>;
export type FireredLeafgreen = z.infer<typeof FireredLeafgreenSchema>;
export type RubySapphire = z.infer<typeof RubySapphireSchema>;
export type DiamondPearl = z.infer<typeof DiamondPearlSchema>;
export type HeartgoldSoulsilver = z.infer<typeof HeartgoldSoulsilverSchema>;
export type Platinum = z.infer<typeof PlatinumSchema>;
export type BlackWhite = z.infer<typeof BlackWhiteSchema>;
export type Animated = z.infer<typeof AnimatedSchema>;
export type OmegarubyAlphasapphire = z.infer<typeof OmegarubyAlphasapphireSchema>;
export type XY = z.infer<typeof XYSchema>;
export type Icons = z.infer<typeof IconsSchema>;
export type UltraSunUltraMoon = z.infer<typeof UltraSunUltraMoonSchema>;
export type Stat = z.infer<typeof StatSchema>;
export type Type = z.infer<typeof TypeSchema>;
"
`;

exports[`#zod can emit schema with nested types 1`] = `
"import { z } from \\"zod\\";


export const UsersSchema = z.object({
  id: z.number().min(1).max(12),
  name: z.string().min(3).max(3).length(3, { message: \\"Exact length required: 3\\" }),
  notes: z.lazy(() => UsersNotesSchema)
});
export const UsersNotesSchema = z.object({
  id: z.number().min(997).max(2998),
  text: z.string().min(5).max(5).length(5, { message: \\"Exact length required: 5\\" })
});
export type Users = z.infer<typeof UsersSchema>;
export type UsersNotes = z.infer<typeof UsersNotesSchema>;
"
`;
