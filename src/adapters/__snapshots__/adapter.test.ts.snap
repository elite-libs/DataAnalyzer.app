// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`#knex can emit migration 1`] = `
"// More info: http://knexjs.org/#Schema-createTable

exports.up = async function up(knex) {
  
  /* Note: no nested types detected */

  // Create the main table
  return knex.schema.createTable(\\"users\\", (table) => {
    table.uuid(\\"id\\").notNullable().primary();
    table.string(\\"email\\", 40).notNullable();
    table.string(\\"first_name\\", 20).notNullable();
    table.string(\\"last_name\\", 20).notNullable();
    table.boolean(\\"is_active\\").notNullable();
    table.datetime(\\"created_at\\").notNullable();
    table.datetime(\\"modified_at\\").notNullable();
    table.string(\\"catch_phrase\\", 60).notNullable();
    table.string(\\"company_name\\", 20).notNullable();
    table.integer(\\"credits\\").enum('1', '15', '20', '10', '0', '11', '7', '9').notNullable();
    table.decimal(\\"sales_score\\", 10, 8).notNullable();
    table.string(\\"location\\", 20).enum('nyc', 'remote', 'denver').notNullable();
    table.string(\\"profile\\", 400).unique();
  })

};

exports.down = async function down(knex) {
  await knex.schema.dropTableIfExists(\\"users\\");
};
"
`;

exports[`#knex can emit migration for nested type 1`] = `
"// More info: http://knexjs.org/#Schema-createTable

exports.up = async function up(knex) {
  // NOTE #1: You can break up multiple createTable's into different migration scripts
  // OR, you can chain the calls to .createTable()'s
  // NOTE #2: make sure any tables are created before it's relations (tables) are setup.

  await knex.schema.createTable(\\"users_notes\\", (table) => {
    table.increments(\\"id\\");
    table.string(\\"text\\", 20).notNullable();
  })



  // Create the main table
  return knex.schema.createTable(\\"users\\", (table) => {
    table.increments(\\"id\\");
    table.string(\\"name\\", 20).notNullable();
    table.integer(\\"notes\\").references(\\"id\\").inTable('users_notes'); // note: one-to-many
  })

};

exports.down = async function down(knex) {
  await knex.schema.dropTableIfExists(\\"users_notes\\");
  await knex.schema.dropTableIfExists(\\"users\\");
};
"
`;

exports[`#knex can emit migration for people json 1`] = `
"// More info: http://knexjs.org/#Schema-createTable

exports.up = async function up(knex) {
  
  /* Note: no nested types detected */

  // Create the main table
  return knex.schema.createTable(\\"people\\", (table) => {
    table.string(\\"name\\", 40).notNullable().unique();
    table.integer(\\"height\\");
    table.integer(\\"mass\\");
    table.string(\\"hair_color\\", 20).notNullable();
    table.string(\\"skin_color\\", 20);
    table.string(\\"eye_color\\", 20).enum('blue', 'yellow', 'red', 'brown', 'blue-gray', 'black', 'orange', 'hazel').notNullable();
    table.string(\\"birth_year\\", 20);
    table.string(\\"homeworld\\", 60).notNullable();
    table.json(\\"films\\").notNullable();
    table.json(\\"species\\").notNullable();
    table.json(\\"vehicles\\").notNullable();
    table.json(\\"starships\\").notNullable();
    table.datetime(\\"created\\").notNullable();
    table.datetime(\\"edited\\").notNullable();
    table.string(\\"url\\", 60).notNullable().unique();
    table.increments(\\"id\\");
  })

};

exports.down = async function down(knex) {
  await knex.schema.dropTableIfExists(\\"people\\");
};
"
`;

exports[`#knex can emit migration with bigInteger id 1`] = `
"// More info: http://knexjs.org/#Schema-createTable

exports.up = async function up(knex) {
  await knex.schema.createTable(\\"users_notes\\", (table) => {
    table.increments(\\"id\\");
    table.string(\\"text\\", 20).notNullable();
})
;


  return knex.schema.createTable(\\"users_big_int\\", (table) => {
    table.increments(\\"id\\");
    table.string(\\"name\\", 20).notNullable();
    table.integer(\\"notes\\").references('id').inTable('users_notes');
})

};

exports.down = async function down(knex) {
  await knex.schema.dropTableIfExists(\\"users_notes\\");
  await knex.schema.dropTableIfExists(\\"users_big_int\\");
};
"
`;

exports[`#mongoose can emit module exports correctly 1`] = `
"const mongoose = require(\\"mongoose\\");
const {Schema, Model, Types} = mongoose;

const Pokemon = new Schema({
  abilities: {
    type: \\"pokemon.abilities\\",
    required: true,
  },
  baseExperience: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  forms: {
    type: \\"pokemon.forms\\",
    required: true,
  },
  gameIndices: {
    type: \\"pokemon.game_indices\\",
    required: true,
  },
  height: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  heldItems: {
    type: \\"Array\\",
    required: true,
  },
  id: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  isDefault: {
    type: \\"Boolean\\",
    required: true,
  },
  locationAreaEncounters: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  moves: {
    type: \\"pokemon.moves\\",
    required: true,
  },
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  order: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  species: {
    type: \\"pokemon.species\\",
    required: true,
  },
  sprites: {
    type: \\"pokemon.sprites\\",
    required: true,
  },
  stats: {
    type: \\"pokemon.stats\\",
    required: true,
  },
  types: {
    type: \\"pokemon.types\\",
    required: true,
  },
  weight: {
    type: \\"Number\\",
    unique: true,
    required: true,
  }});
const PokemonAbilities = new Schema({
  ability: {
    type: \\"pokemon.abilities.ability\\",
    required: true,
  },
  isHidden: {
    type: \\"Boolean\\",
    required: true,
  },
  slot: {
    type: \\"Number\\",
    unique: true,
    required: true,
  }});
const PokemonForms = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonGameIndices = new Schema({
  gameIndex: {
    type: \\"Number\\",
    required: true,
  },
  version: {
    type: \\"pokemon.game_indices.version\\",
    required: true,
  }});
const PokemonMoves = new Schema({
  move: {
    type: \\"pokemon.moves.move\\",
    required: true,
  },
  versionGroupDetails: {
    type: \\"pokemon.moves.version_group_details\\",
    required: true,
  }});
const PokemonSpecies = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSprites = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  other: {
    type: \\"pokemon.sprites.other\\",
    required: true,
  },
  versions: {
    type: \\"pokemon.sprites.versions\\",
    required: true,
  }});
const PokemonStats = new Schema({
  baseStat: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  effort: {
    type: \\"Number\\",
    required: true,
  },
  stat: {
    type: \\"pokemon.stats.stat\\",
    required: true,
  }});
const PokemonTypes = new Schema({
  slot: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  type: {
    type: \\"pokemon.types.type\\",
    required: true,
  }});
const PokemonAbilitiesAbility = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonGameIndicesVersion = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonMovesMove = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonMovesVersionGroupDetails = new Schema({
  levelLearnedAt: {
    type: \\"Number\\",
    required: true,
  },
  moveLearnMethod: {
    type: \\"pokemon.moves.version_group_details.move_learn_method\\",
    required: true,
  },
  versionGroup: {
    type: \\"pokemon.moves.version_group_details.version_group\\",
    required: true,
  }});
const PokemonMovesVersionGroupDetailsMoveLearnMethod = new Schema({
  name: {
    type: \\"String\\",
    required: true,
    enum: [\\"machine\\", \\"tutor\\", \\"level-up\\", \\"egg\\"],
  },
  url: {
    type: \\"String\\",
    required: true,
    enum: [\\"https://pokeapi.co/api/v2/move-learn-method/4/\\", \\"https://pokeapi.co/api/v2/move-learn-method/3/\\", \\"https://pokeapi.co/api/v2/move-learn-method/1/\\", \\"https://pokeapi.co/api/v2/move-learn-method/2/\\"],
  }});
const PokemonMovesVersionGroupDetailsVersionGroup = new Schema({
  name: {
    type: \\"String\\",
    required: true,
  },
  url: {
    type: \\"String\\",
    required: true,
  }});
const PokemonSpritesOther = new Schema({
  dreamWorld: {
    type: \\"pokemon.sprites.other.dream_world\\",
    required: true,
  },
  officialArtwork: {
    type: \\"pokemon.sprites.other.official-artwork\\",
    required: true,
  }});
const PokemonSpritesVersions = new Schema({
  generationI: {
    type: \\"pokemon.sprites.versions.generation-i\\",
    required: true,
  },
  generationIi: {
    type: \\"pokemon.sprites.versions.generation-ii\\",
    required: true,
  },
  generationIii: {
    type: \\"pokemon.sprites.versions.generation-iii\\",
    required: true,
  },
  generationIv: {
    type: \\"pokemon.sprites.versions.generation-iv\\",
    required: true,
  },
  generationV: {
    type: \\"pokemon.sprites.versions.generation-v\\",
    required: true,
  },
  generationVi: {
    type: \\"pokemon.sprites.versions.generation-vi\\",
    required: true,
  },
  generationVii: {
    type: \\"pokemon.sprites.versions.generation-vii\\",
    required: true,
  },
  generationViii: {
    type: \\"pokemon.sprites.versions.generation-viii\\",
    required: true,
  }});
const PokemonSpritesOtherDreamWorld = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesOtherOfficialArtwork = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSpritesVersionsGenerationI = new Schema({
  redBlue: {
    type: \\"pokemon.sprites.versions.generation-i.red-blue\\",
    required: true,
  },
  yellow: {
    type: \\"pokemon.sprites.versions.generation-i.yellow\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationIi = new Schema({
  crystal: {
    type: \\"pokemon.sprites.versions.generation-ii.crystal\\",
    required: true,
  },
  gold: {
    type: \\"pokemon.sprites.versions.generation-ii.gold\\",
    required: true,
  },
  silver: {
    type: \\"pokemon.sprites.versions.generation-ii.silver\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationIii = new Schema({
  emerald: {
    type: \\"pokemon.sprites.versions.generation-iii.emerald\\",
    required: true,
  },
  fireredLeafgreen: {
    type: \\"pokemon.sprites.versions.generation-iii.firered-leafgreen\\",
    required: true,
  },
  rubySapphire: {
    type: \\"pokemon.sprites.versions.generation-iii.ruby-sapphire\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationIv = new Schema({
  diamondPearl: {
    type: \\"pokemon.sprites.versions.generation-iv.diamond-pearl\\",
    required: true,
  },
  heartgoldSoulsilver: {
    type: \\"pokemon.sprites.versions.generation-iv.heartgold-soulsilver\\",
    required: true,
  },
  platinum: {
    type: \\"pokemon.sprites.versions.generation-iv.platinum\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationV = new Schema({
  blackWhite: {
    type: \\"pokemon.sprites.versions.generation-v.black-white\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationVi = new Schema({
  omegarubyAlphasapphire: {
    type: \\"pokemon.sprites.versions.generation-vi.omegaruby-alphasapphire\\",
    required: true,
  },
  xY: {
    type: \\"pokemon.sprites.versions.generation-vi.x-y\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationVii = new Schema({
  icons: {
    type: \\"pokemon.sprites.versions.generation-vii.icons\\",
    required: true,
  },
  ultraSunUltraMoon: {
    type: \\"pokemon.sprites.versions.generation-vii.ultra-sun-ultra-moon\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationViii = new Schema({
  icons: {
    type: \\"pokemon.sprites.versions.generation-viii.icons\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationIRedBlue = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backGray: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontGray: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSpritesVersionsGenerationIYellow = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backGray: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontGray: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSpritesVersionsGenerationIiCrystal = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSpritesVersionsGenerationIiGold = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSpritesVersionsGenerationIiSilver = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSpritesVersionsGenerationIiiEmerald = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSpritesVersionsGenerationIiiFireredLeafgreen = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSpritesVersionsGenerationIiiRubySapphire = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonSpritesVersionsGenerationIvDiamondPearl = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationIvPlatinum = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationVBlackWhite = new Schema({
  animated: {
    type: \\"pokemon.sprites.versions.generation-v.black-white.animated\\",
    required: true,
  },
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationVBlackWhiteAnimated = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationViXY = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationViiIcons = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationViiUltraSunUltraMoon = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonSpritesVersionsGenerationViiiIcons = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  }});
const PokemonStatsStat = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const PokemonTypesType = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const pokemonModel = mongoose.model(\\"pokemon\\", Pokemon);
const pokemonAbilitiesModel = mongoose.model(\\"pokemonAbilities\\", PokemonAbilities);
const pokemonFormsModel = mongoose.model(\\"pokemonForms\\", PokemonForms);
const pokemonGameIndicesModel = mongoose.model(\\"pokemonGameIndices\\", PokemonGameIndices);
const pokemonMovesModel = mongoose.model(\\"pokemonMoves\\", PokemonMoves);
const pokemonSpeciesModel = mongoose.model(\\"pokemonSpecies\\", PokemonSpecies);
const pokemonSpritesModel = mongoose.model(\\"pokemonSprites\\", PokemonSprites);
const pokemonStatsModel = mongoose.model(\\"pokemonStats\\", PokemonStats);
const pokemonTypesModel = mongoose.model(\\"pokemonTypes\\", PokemonTypes);
const pokemonAbilitiesAbilityModel = mongoose.model(\\"pokemonAbilitiesAbility\\", PokemonAbilitiesAbility);
const pokemonGameIndicesVersionModel = mongoose.model(\\"pokemonGameIndicesVersion\\", PokemonGameIndicesVersion);
const pokemonMovesMoveModel = mongoose.model(\\"pokemonMovesMove\\", PokemonMovesMove);
const pokemonMovesVersionGroupDetailsModel = mongoose.model(\\"pokemonMovesVersionGroupDetails\\", PokemonMovesVersionGroupDetails);
const pokemonMovesVersionGroupDetailsMoveLearnMethodModel = mongoose.model(\\"pokemonMovesVersionGroupDetailsMoveLearnMethod\\", PokemonMovesVersionGroupDetailsMoveLearnMethod);
const pokemonMovesVersionGroupDetailsVersionGroupModel = mongoose.model(\\"pokemonMovesVersionGroupDetailsVersionGroup\\", PokemonMovesVersionGroupDetailsVersionGroup);
const pokemonSpritesOtherModel = mongoose.model(\\"pokemonSpritesOther\\", PokemonSpritesOther);
const pokemonSpritesVersionsModel = mongoose.model(\\"pokemonSpritesVersions\\", PokemonSpritesVersions);
const pokemonSpritesOtherDreamWorldModel = mongoose.model(\\"pokemonSpritesOtherDreamWorld\\", PokemonSpritesOtherDreamWorld);
const pokemonSpritesOtherOfficialArtworkModel = mongoose.model(\\"pokemonSpritesOtherOfficialArtwork\\", PokemonSpritesOtherOfficialArtwork);
const pokemonSpritesVersionsGenerationIModel = mongoose.model(\\"pokemonSpritesVersionsGenerationI\\", PokemonSpritesVersionsGenerationI);
const pokemonSpritesVersionsGenerationIiModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIi\\", PokemonSpritesVersionsGenerationIi);
const pokemonSpritesVersionsGenerationIiiModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIii\\", PokemonSpritesVersionsGenerationIii);
const pokemonSpritesVersionsGenerationIvModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIv\\", PokemonSpritesVersionsGenerationIv);
const pokemonSpritesVersionsGenerationVModel = mongoose.model(\\"pokemonSpritesVersionsGenerationV\\", PokemonSpritesVersionsGenerationV);
const pokemonSpritesVersionsGenerationViModel = mongoose.model(\\"pokemonSpritesVersionsGenerationVi\\", PokemonSpritesVersionsGenerationVi);
const pokemonSpritesVersionsGenerationViiModel = mongoose.model(\\"pokemonSpritesVersionsGenerationVii\\", PokemonSpritesVersionsGenerationVii);
const pokemonSpritesVersionsGenerationViiiModel = mongoose.model(\\"pokemonSpritesVersionsGenerationViii\\", PokemonSpritesVersionsGenerationViii);
const pokemonSpritesVersionsGenerationIRedBlueModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIRedBlue\\", PokemonSpritesVersionsGenerationIRedBlue);
const pokemonSpritesVersionsGenerationIYellowModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIYellow\\", PokemonSpritesVersionsGenerationIYellow);
const pokemonSpritesVersionsGenerationIiCrystalModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIiCrystal\\", PokemonSpritesVersionsGenerationIiCrystal);
const pokemonSpritesVersionsGenerationIiGoldModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIiGold\\", PokemonSpritesVersionsGenerationIiGold);
const pokemonSpritesVersionsGenerationIiSilverModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIiSilver\\", PokemonSpritesVersionsGenerationIiSilver);
const pokemonSpritesVersionsGenerationIiiEmeraldModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIiiEmerald\\", PokemonSpritesVersionsGenerationIiiEmerald);
const pokemonSpritesVersionsGenerationIiiFireredLeafgreenModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIiiFireredLeafgreen\\", PokemonSpritesVersionsGenerationIiiFireredLeafgreen);
const pokemonSpritesVersionsGenerationIiiRubySapphireModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIiiRubySapphire\\", PokemonSpritesVersionsGenerationIiiRubySapphire);
const pokemonSpritesVersionsGenerationIvDiamondPearlModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIvDiamondPearl\\", PokemonSpritesVersionsGenerationIvDiamondPearl);
const pokemonSpritesVersionsGenerationIvHeartgoldSoulsilverModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIvHeartgoldSoulsilver\\", PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver);
const pokemonSpritesVersionsGenerationIvPlatinumModel = mongoose.model(\\"pokemonSpritesVersionsGenerationIvPlatinum\\", PokemonSpritesVersionsGenerationIvPlatinum);
const pokemonSpritesVersionsGenerationVBlackWhiteModel = mongoose.model(\\"pokemonSpritesVersionsGenerationVBlackWhite\\", PokemonSpritesVersionsGenerationVBlackWhite);
const pokemonSpritesVersionsGenerationVBlackWhiteAnimatedModel = mongoose.model(\\"pokemonSpritesVersionsGenerationVBlackWhiteAnimated\\", PokemonSpritesVersionsGenerationVBlackWhiteAnimated);
const pokemonSpritesVersionsGenerationViOmegarubyAlphasapphireModel = mongoose.model(\\"pokemonSpritesVersionsGenerationViOmegarubyAlphasapphire\\", PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire);
const pokemonSpritesVersionsGenerationViXYModel = mongoose.model(\\"pokemonSpritesVersionsGenerationViXY\\", PokemonSpritesVersionsGenerationViXY);
const pokemonSpritesVersionsGenerationViiIconsModel = mongoose.model(\\"pokemonSpritesVersionsGenerationViiIcons\\", PokemonSpritesVersionsGenerationViiIcons);
const pokemonSpritesVersionsGenerationViiUltraSunUltraMoonModel = mongoose.model(\\"pokemonSpritesVersionsGenerationViiUltraSunUltraMoon\\", PokemonSpritesVersionsGenerationViiUltraSunUltraMoon);
const pokemonSpritesVersionsGenerationViiiIconsModel = mongoose.model(\\"pokemonSpritesVersionsGenerationViiiIcons\\", PokemonSpritesVersionsGenerationViiiIcons);
const pokemonStatsStatModel = mongoose.model(\\"pokemonStatsStat\\", PokemonStatsStat);
const pokemonTypesTypeModel = mongoose.model(\\"pokemonTypesType\\", PokemonTypesType);
module.exports.Pokemon = pokemonModel;
module.exports.PokemonAbilities = pokemonAbilitiesModel;
module.exports.PokemonForms = pokemonFormsModel;
module.exports.PokemonGameIndices = pokemonGameIndicesModel;
module.exports.PokemonMoves = pokemonMovesModel;
module.exports.PokemonSpecies = pokemonSpeciesModel;
module.exports.PokemonSprites = pokemonSpritesModel;
module.exports.PokemonStats = pokemonStatsModel;
module.exports.PokemonTypes = pokemonTypesModel;
module.exports.PokemonAbilitiesAbility = pokemonAbilitiesAbilityModel;
module.exports.PokemonGameIndicesVersion = pokemonGameIndicesVersionModel;
module.exports.PokemonMovesMove = pokemonMovesMoveModel;
module.exports.PokemonMovesVersionGroupDetails = pokemonMovesVersionGroupDetailsModel;
module.exports.PokemonMovesVersionGroupDetailsMoveLearnMethod = pokemonMovesVersionGroupDetailsMoveLearnMethodModel;
module.exports.PokemonMovesVersionGroupDetailsVersionGroup = pokemonMovesVersionGroupDetailsVersionGroupModel;
module.exports.PokemonSpritesOther = pokemonSpritesOtherModel;
module.exports.PokemonSpritesVersions = pokemonSpritesVersionsModel;
module.exports.PokemonSpritesOtherDreamWorld = pokemonSpritesOtherDreamWorldModel;
module.exports.PokemonSpritesOtherOfficialArtwork = pokemonSpritesOtherOfficialArtworkModel;
module.exports.PokemonSpritesVersionsGenerationI = pokemonSpritesVersionsGenerationIModel;
module.exports.PokemonSpritesVersionsGenerationIi = pokemonSpritesVersionsGenerationIiModel;
module.exports.PokemonSpritesVersionsGenerationIii = pokemonSpritesVersionsGenerationIiiModel;
module.exports.PokemonSpritesVersionsGenerationIv = pokemonSpritesVersionsGenerationIvModel;
module.exports.PokemonSpritesVersionsGenerationV = pokemonSpritesVersionsGenerationVModel;
module.exports.PokemonSpritesVersionsGenerationVi = pokemonSpritesVersionsGenerationViModel;
module.exports.PokemonSpritesVersionsGenerationVii = pokemonSpritesVersionsGenerationViiModel;
module.exports.PokemonSpritesVersionsGenerationViii = pokemonSpritesVersionsGenerationViiiModel;
module.exports.PokemonSpritesVersionsGenerationIRedBlue = pokemonSpritesVersionsGenerationIRedBlueModel;
module.exports.PokemonSpritesVersionsGenerationIYellow = pokemonSpritesVersionsGenerationIYellowModel;
module.exports.PokemonSpritesVersionsGenerationIiCrystal = pokemonSpritesVersionsGenerationIiCrystalModel;
module.exports.PokemonSpritesVersionsGenerationIiGold = pokemonSpritesVersionsGenerationIiGoldModel;
module.exports.PokemonSpritesVersionsGenerationIiSilver = pokemonSpritesVersionsGenerationIiSilverModel;
module.exports.PokemonSpritesVersionsGenerationIiiEmerald = pokemonSpritesVersionsGenerationIiiEmeraldModel;
module.exports.PokemonSpritesVersionsGenerationIiiFireredLeafgreen = pokemonSpritesVersionsGenerationIiiFireredLeafgreenModel;
module.exports.PokemonSpritesVersionsGenerationIiiRubySapphire = pokemonSpritesVersionsGenerationIiiRubySapphireModel;
module.exports.PokemonSpritesVersionsGenerationIvDiamondPearl = pokemonSpritesVersionsGenerationIvDiamondPearlModel;
module.exports.PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver = pokemonSpritesVersionsGenerationIvHeartgoldSoulsilverModel;
module.exports.PokemonSpritesVersionsGenerationIvPlatinum = pokemonSpritesVersionsGenerationIvPlatinumModel;
module.exports.PokemonSpritesVersionsGenerationVBlackWhite = pokemonSpritesVersionsGenerationVBlackWhiteModel;
module.exports.PokemonSpritesVersionsGenerationVBlackWhiteAnimated = pokemonSpritesVersionsGenerationVBlackWhiteAnimatedModel;
module.exports.PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire = pokemonSpritesVersionsGenerationViOmegarubyAlphasapphireModel;
module.exports.PokemonSpritesVersionsGenerationViXY = pokemonSpritesVersionsGenerationViXYModel;
module.exports.PokemonSpritesVersionsGenerationViiIcons = pokemonSpritesVersionsGenerationViiIconsModel;
module.exports.PokemonSpritesVersionsGenerationViiUltraSunUltraMoon = pokemonSpritesVersionsGenerationViiUltraSunUltraMoonModel;
module.exports.PokemonSpritesVersionsGenerationViiiIcons = pokemonSpritesVersionsGenerationViiiIconsModel;
module.exports.PokemonStatsStat = pokemonStatsStatModel;
module.exports.PokemonTypesType = pokemonTypesTypeModel;"
`;

exports[`#mongoose can emit schema 1`] = `
"const mongoose = require(\\"mongoose\\");
const {Schema, Model, Types} = mongoose;

const Users = new Schema({
  id: {
    type: \\"UUID\\",
    unique: true,
    required: true,
  },
  email: {
    type: \\"String\\",
    required: true,
  },
  firstName: {
    type: \\"String\\",
    required: true,
  },
  lastName: {
    type: \\"String\\",
    required: true,
  },
  isActive: {
    type: \\"Boolean\\",
    required: true,
  },
  createdAt: {
    type: \\"Date\\",
    required: true,
  },
  modifiedAt: {
    type: \\"Date\\",
    required: true,
  },
  catchPhrase: {
    type: \\"String\\",
    required: true,
  },
  companyName: {
    type: \\"String\\",
    required: true,
  },
  credits: {
    type: \\"Number\\",
    required: true,
    enum: [\\"1\\", \\"15\\", \\"20\\", \\"10\\", \\"0\\", \\"11\\", \\"7\\", \\"9\\"],
  },
  salesScore: {
    type: \\"Float\\",
    required: true,
  },
  location: {
    type: \\"String\\",
    required: true,
    enum: [\\"nyc\\", \\"remote\\", \\"denver\\"],
  },
  profile: {
    type: \\"String\\",
    unique: true,
  }});
const usersModel = mongoose.model(\\"users\\", Users);
module.exports.Users = usersModel;"
`;

exports[`#mongoose can emit schema for people json 1`] = `
"const mongoose = require(\\"mongoose\\");
const {Schema, Model, Types} = mongoose;

const People = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  height: {
    type: \\"Number\\",
  },
  mass: {
    type: \\"Number\\",
  },
  hairColor: {
    type: \\"String\\",
    required: true,
  },
  skinColor: {
    type: \\"String\\",
  },
  eyeColor: {
    type: \\"String\\",
    required: true,
    enum: [\\"blue\\", \\"yellow\\", \\"red\\", \\"brown\\", \\"blue-gray\\", \\"black\\", \\"orange\\", \\"hazel\\"],
  },
  birthYear: {
    type: \\"String\\",
  },
  homeworld: {
    type: \\"String\\",
    required: true,
  },
  films: {
    type: \\"Array\\",
    required: true,
  },
  species: {
    type: \\"Array\\",
    required: true,
  },
  vehicles: {
    type: \\"Array\\",
    required: true,
  },
  starships: {
    type: \\"Array\\",
    required: true,
  },
  created: {
    type: \\"Date\\",
    unique: true,
    required: true,
  },
  edited: {
    type: \\"Date\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  id: {
    type: \\"Number\\",
    unique: true,
    required: true,
  }});
const peopleModel = mongoose.model(\\"people\\", People);
module.exports.People = peopleModel;"
`;

exports[`#mongoose can emit schema with better names 1`] = `
"const mongoose = require(\\"mongoose\\");
const {Schema, Model, Types} = mongoose;

const Pokemon = new Schema({
  abilities: {
    type: \\"abilities\\",
    required: true,
  },
  baseExperience: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  forms: {
    type: \\"forms\\",
    required: true,
  },
  gameIndices: {
    type: \\"game_indices\\",
    required: true,
  },
  height: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  heldItems: {
    type: \\"Array\\",
    required: true,
  },
  id: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  isDefault: {
    type: \\"Boolean\\",
    required: true,
  },
  locationAreaEncounters: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  moves: {
    type: \\"moves\\",
    required: true,
  },
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  order: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  species: {
    type: \\"species\\",
    required: true,
  },
  sprites: {
    type: \\"sprites\\",
    required: true,
  },
  stats: {
    type: \\"stats\\",
    required: true,
  },
  types: {
    type: \\"types\\",
    required: true,
  },
  weight: {
    type: \\"Number\\",
    unique: true,
    required: true,
  }});
const Abilities = new Schema({
  ability: {
    type: \\"ability\\",
    required: true,
  },
  isHidden: {
    type: \\"Boolean\\",
    required: true,
  },
  slot: {
    type: \\"Number\\",
    unique: true,
    required: true,
  }});
const Forms = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const GameIndices = new Schema({
  gameIndex: {
    type: \\"Number\\",
    required: true,
  },
  version: {
    type: \\"version\\",
    required: true,
  }});
const Moves = new Schema({
  move: {
    type: \\"move\\",
    required: true,
  },
  versionGroupDetails: {
    type: \\"version_group_details\\",
    required: true,
  }});
const Species = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const Sprites = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  other: {
    type: \\"other\\",
    required: true,
  },
  versions: {
    type: \\"versions\\",
    required: true,
  }});
const Stats = new Schema({
  baseStat: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  effort: {
    type: \\"Number\\",
    required: true,
  },
  stat: {
    type: \\"stat\\",
    required: true,
  }});
const Types = new Schema({
  slot: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  type: {
    type: \\"type\\",
    required: true,
  }});
const Ability = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const Version = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const Move = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const VersionGroupDetails = new Schema({
  levelLearnedAt: {
    type: \\"Number\\",
    required: true,
  },
  moveLearnMethod: {
    type: \\"move_learn_method\\",
    required: true,
  },
  versionGroup: {
    type: \\"version_group\\",
    required: true,
  }});
const MoveLearnMethod = new Schema({
  name: {
    type: \\"String\\",
    required: true,
    enum: [\\"machine\\", \\"tutor\\", \\"level-up\\", \\"egg\\"],
  },
  url: {
    type: \\"String\\",
    required: true,
    enum: [\\"https://pokeapi.co/api/v2/move-learn-method/4/\\", \\"https://pokeapi.co/api/v2/move-learn-method/3/\\", \\"https://pokeapi.co/api/v2/move-learn-method/1/\\", \\"https://pokeapi.co/api/v2/move-learn-method/2/\\"],
  }});
const VersionGroup = new Schema({
  name: {
    type: \\"String\\",
    required: true,
  },
  url: {
    type: \\"String\\",
    required: true,
  }});
const Other = new Schema({
  dreamWorld: {
    type: \\"dream_world\\",
    required: true,
  },
  officialArtwork: {
    type: \\"official-artwork\\",
    required: true,
  }});
const Versions = new Schema({
  generationI: {
    type: \\"generation-i\\",
    required: true,
  },
  generationIi: {
    type: \\"generation-ii\\",
    required: true,
  },
  generationIii: {
    type: \\"generation-iii\\",
    required: true,
  },
  generationIv: {
    type: \\"generation-iv\\",
    required: true,
  },
  generationV: {
    type: \\"generation-v\\",
    required: true,
  },
  generationVi: {
    type: \\"generation-vi\\",
    required: true,
  },
  generationVii: {
    type: \\"generation-vii\\",
    required: true,
  },
  generationViii: {
    type: \\"generation-viii\\",
    required: true,
  }});
const DreamWorld = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  }});
const OfficialArtwork = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const GenerationI = new Schema({
  redBlue: {
    type: \\"red-blue\\",
    required: true,
  },
  yellow: {
    type: \\"yellow\\",
    required: true,
  }});
const GenerationIi = new Schema({
  crystal: {
    type: \\"crystal\\",
    required: true,
  },
  gold: {
    type: \\"gold\\",
    required: true,
  },
  silver: {
    type: \\"silver\\",
    required: true,
  }});
const GenerationIii = new Schema({
  emerald: {
    type: \\"emerald\\",
    required: true,
  },
  fireredLeafgreen: {
    type: \\"firered-leafgreen\\",
    required: true,
  },
  rubySapphire: {
    type: \\"ruby-sapphire\\",
    required: true,
  }});
const GenerationIv = new Schema({
  diamondPearl: {
    type: \\"diamond-pearl\\",
    required: true,
  },
  heartgoldSoulsilver: {
    type: \\"heartgold-soulsilver\\",
    required: true,
  },
  platinum: {
    type: \\"platinum\\",
    required: true,
  }});
const GenerationV = new Schema({
  blackWhite: {
    type: \\"black-white\\",
    required: true,
  }});
const GenerationVi = new Schema({
  omegarubyAlphasapphire: {
    type: \\"omegaruby-alphasapphire\\",
    required: true,
  },
  xY: {
    type: \\"x-y\\",
    required: true,
  }});
const GenerationVii = new Schema({
  icons: {
    type: \\"icons\\",
    required: true,
  },
  ultraSunUltraMoon: {
    type: \\"ultra-sun-ultra-moon\\",
    required: true,
  }});
const GenerationViii = new Schema({
  icons: {
    type: \\"icons\\",
    required: true,
  }});
const RedBlue = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backGray: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontGray: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const Yellow = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backGray: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontGray: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const Crystal = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const Gold = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const Silver = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const Emerald = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const FireredLeafgreen = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const RubySapphire = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const DiamondPearl = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const HeartgoldSoulsilver = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const Platinum = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const BlackWhite = new Schema({
  animated: {
    type: \\"animated\\",
    required: true,
  },
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const Animated = new Schema({
  backDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backFemale: {
    type: \\"Null\\",
    required: true,
  },
  backShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  backShinyFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const OmegarubyAlphasapphire = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const XY = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const Icons = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  }});
const UltraSunUltraMoon = new Schema({
  frontDefault: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontFemale: {
    type: \\"Null\\",
    required: true,
  },
  frontShiny: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  frontShinyFemale: {
    type: \\"Null\\",
    required: true,
  }});
const Stat = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const Type = new Schema({
  name: {
    type: \\"String\\",
    unique: true,
    required: true,
  },
  url: {
    type: \\"String\\",
    unique: true,
    required: true,
  }});
const pokemonModel = mongoose.model(\\"pokemon\\", Pokemon);
const abilitiesModel = mongoose.model(\\"abilities\\", Abilities);
const formsModel = mongoose.model(\\"forms\\", Forms);
const gameIndicesModel = mongoose.model(\\"gameIndices\\", GameIndices);
const movesModel = mongoose.model(\\"moves\\", Moves);
const speciesModel = mongoose.model(\\"species\\", Species);
const spritesModel = mongoose.model(\\"sprites\\", Sprites);
const statsModel = mongoose.model(\\"stats\\", Stats);
const typesModel = mongoose.model(\\"types\\", Types);
const abilityModel = mongoose.model(\\"ability\\", Ability);
const versionModel = mongoose.model(\\"version\\", Version);
const moveModel = mongoose.model(\\"move\\", Move);
const versionGroupDetailsModel = mongoose.model(\\"versionGroupDetails\\", VersionGroupDetails);
const moveLearnMethodModel = mongoose.model(\\"moveLearnMethod\\", MoveLearnMethod);
const versionGroupModel = mongoose.model(\\"versionGroup\\", VersionGroup);
const otherModel = mongoose.model(\\"other\\", Other);
const versionsModel = mongoose.model(\\"versions\\", Versions);
const dreamWorldModel = mongoose.model(\\"dreamWorld\\", DreamWorld);
const officialArtworkModel = mongoose.model(\\"officialArtwork\\", OfficialArtwork);
const generationIModel = mongoose.model(\\"generationI\\", GenerationI);
const generationIiModel = mongoose.model(\\"generationIi\\", GenerationIi);
const generationIiiModel = mongoose.model(\\"generationIii\\", GenerationIii);
const generationIvModel = mongoose.model(\\"generationIv\\", GenerationIv);
const generationVModel = mongoose.model(\\"generationV\\", GenerationV);
const generationViModel = mongoose.model(\\"generationVi\\", GenerationVi);
const generationViiModel = mongoose.model(\\"generationVii\\", GenerationVii);
const generationViiiModel = mongoose.model(\\"generationViii\\", GenerationViii);
const redBlueModel = mongoose.model(\\"redBlue\\", RedBlue);
const yellowModel = mongoose.model(\\"yellow\\", Yellow);
const crystalModel = mongoose.model(\\"crystal\\", Crystal);
const goldModel = mongoose.model(\\"gold\\", Gold);
const silverModel = mongoose.model(\\"silver\\", Silver);
const emeraldModel = mongoose.model(\\"emerald\\", Emerald);
const fireredLeafgreenModel = mongoose.model(\\"fireredLeafgreen\\", FireredLeafgreen);
const rubySapphireModel = mongoose.model(\\"rubySapphire\\", RubySapphire);
const diamondPearlModel = mongoose.model(\\"diamondPearl\\", DiamondPearl);
const heartgoldSoulsilverModel = mongoose.model(\\"heartgoldSoulsilver\\", HeartgoldSoulsilver);
const platinumModel = mongoose.model(\\"platinum\\", Platinum);
const blackWhiteModel = mongoose.model(\\"blackWhite\\", BlackWhite);
const animatedModel = mongoose.model(\\"animated\\", Animated);
const omegarubyAlphasapphireModel = mongoose.model(\\"omegarubyAlphasapphire\\", OmegarubyAlphasapphire);
const xYModel = mongoose.model(\\"xY\\", XY);
const iconsModel = mongoose.model(\\"icons\\", Icons);
const ultraSunUltraMoonModel = mongoose.model(\\"ultraSunUltraMoon\\", UltraSunUltraMoon);
const statModel = mongoose.model(\\"stat\\", Stat);
const typeModel = mongoose.model(\\"type\\", Type);
module.exports.Pokemon = pokemonModel;
module.exports.Abilities = abilitiesModel;
module.exports.Forms = formsModel;
module.exports.GameIndices = gameIndicesModel;
module.exports.Moves = movesModel;
module.exports.Species = speciesModel;
module.exports.Sprites = spritesModel;
module.exports.Stats = statsModel;
module.exports.Types = typesModel;
module.exports.Ability = abilityModel;
module.exports.Version = versionModel;
module.exports.Move = moveModel;
module.exports.VersionGroupDetails = versionGroupDetailsModel;
module.exports.MoveLearnMethod = moveLearnMethodModel;
module.exports.VersionGroup = versionGroupModel;
module.exports.Other = otherModel;
module.exports.Versions = versionsModel;
module.exports.DreamWorld = dreamWorldModel;
module.exports.OfficialArtwork = officialArtworkModel;
module.exports.GenerationI = generationIModel;
module.exports.GenerationIi = generationIiModel;
module.exports.GenerationIii = generationIiiModel;
module.exports.GenerationIv = generationIvModel;
module.exports.GenerationV = generationVModel;
module.exports.GenerationVi = generationViModel;
module.exports.GenerationVii = generationViiModel;
module.exports.GenerationViii = generationViiiModel;
module.exports.RedBlue = redBlueModel;
module.exports.Yellow = yellowModel;
module.exports.Crystal = crystalModel;
module.exports.Gold = goldModel;
module.exports.Silver = silverModel;
module.exports.Emerald = emeraldModel;
module.exports.FireredLeafgreen = fireredLeafgreenModel;
module.exports.RubySapphire = rubySapphireModel;
module.exports.DiamondPearl = diamondPearlModel;
module.exports.HeartgoldSoulsilver = heartgoldSoulsilverModel;
module.exports.Platinum = platinumModel;
module.exports.BlackWhite = blackWhiteModel;
module.exports.Animated = animatedModel;
module.exports.OmegarubyAlphasapphire = omegarubyAlphasapphireModel;
module.exports.XY = xYModel;
module.exports.Icons = iconsModel;
module.exports.UltraSunUltraMoon = ultraSunUltraMoonModel;
module.exports.Stat = statModel;
module.exports.Type = typeModel;"
`;

exports[`#mongoose can emit schema with nested types 1`] = `
"const mongoose = require(\\"mongoose\\");
const {Schema, Model, Types} = mongoose;

const Users = new Schema({
  id: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  name: {
    type: \\"String\\",
    required: true,
  },
  notes: {
    type: \\"users.notes\\",
    required: true,
  }});
const UsersNotes = new Schema({
  id: {
    type: \\"Number\\",
    unique: true,
    required: true,
  },
  text: {
    type: \\"String\\",
    required: true,
  }});
const usersModel = mongoose.model(\\"users\\", Users);
const usersNotesModel = mongoose.model(\\"usersNotes\\", UsersNotes);
module.exports.Users = usersModel;
module.exports.UsersNotes = usersNotesModel;"
`;

exports[`#typescript can emit interface for nested types 1`] = `
"export interface Users {
  id: number;
  name: string;
  notes: UsersNotes[];
};
export interface UsersNotes {
  id: number;
  text: string;
};
"
`;

exports[`#typescript can emit interface for people json 1`] = `
"export interface People {
  name: string;
  height?: number  | null;
  mass?: number  | null;
  hairColor: string;
  skinColor?: string  | null;
  eyeColor: \\"blue\\" | \\"yellow\\" | \\"red\\" | \\"brown\\" | \\"blue-gray\\" | \\"black\\" | \\"orange\\" | \\"hazel\\";
  birthYear?: string  | null;
  homeworld: string;
  films: any[];
  species: any[];
  vehicles: any[];
  starships: any[];
  created: Date;
  edited: Date;
  url: string;
  id: number;
};
"
`;

exports[`#typescript can emit interface(s) 1`] = `
"export interface Users {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  isActive: boolean;
  createdAt: Date;
  modifiedAt: Date;
  catchPhrase: string;
  companyName: string;
  credits: \\"1\\" | \\"15\\" | \\"20\\" | \\"10\\" | \\"0\\" | \\"11\\" | \\"7\\" | \\"9\\";
  salesScore: number;
  location: \\"nyc\\" | \\"remote\\" | \\"denver\\";
  profile?: string  | null;
};
"
`;
